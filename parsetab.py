
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'funcDeclAND ANDEQUAL ARROW AUTO BREAK CASE CHAR CHARACTER COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVEQUAL DIVIDE DO DOUBLE DQUOT ELLIPSIS ELSE ENUM EQ EQUALS EXTERN FALSE FLOAT FOR GE GOTO ID IF INCREMENT INT LAND LANGLE LBRACE LBRACKET LE LNOT LONG LOR LPAREN LSHIFT LSHIFTEQUAL MINUS MINUSEQUAL MODEQUAL MODULO NE NOT NUMCONST OR OREQUAL PERIOD PLUS PLUSEQUAL RANGLE RBRACE RBRACKET REGISTER RETURN RPAREN RSHIFT RSHIFTEQUAL SEMI SHORT SIGNED SIZEOF SQUOT STATIC STRING STRUCT SWITCH TIMES TIMESEQUAL TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOR XOREQUALempty :\n    statement_list : empty\n                   | statement statement_list\n    statement : return_stmt SEMI\n              | var_decl SEMI\n              | var_assign SEMI\n              | whileLoop \n              | empty\n    \n    expr : operand bin_op operand\n    \n    operand : ID\n            | NUMCONST\n    \n    bin_op : PLUS\n           | MINUS\n           | TIMES\n           | DIVIDE\n           | MODULO\n    \n    return_stmt : RETURN operand\n                | RETURN expr\n                | RETURN var_assign\n    \n    var_decl : type_spec ID\n             | type_spec var_assign\n    \n    var_assign : ID EQUALS operand\n               | ID EQUALS expr\n               | ID EQUALS STRING\n               | LPAREN var_assign RPAREN\n    \n    type_spec_list : type_spec_list COMMA type_spec ID\n                   | type_spec ID\n    type_spec : INT\n              | CHAR\n    \n    scope : LBRACE statement_list RBRACE\n    \n    funcDecl : type_spec ID LPAREN args RPAREN scope\n    args : type_spec_list\n         | empty\n    \n    compOps     : LE\n                | GE\n                | EQ\n                | NE\n    \n    conditionals    : operand compOps operand\n                    | TRUE\n                    | FALSE\n                    | LPAREN conditionals RPAREN\n    \n    whileLoop   : WHILE LPAREN conditionals RPAREN scope\n    '
    
_lr_action_items = {'INT':([0,6,13,15,18,19,23,30,32,33,34,70,],[3,3,3,3,-8,3,-7,-30,-4,-5,-6,-42,]),'CHAR':([0,6,13,15,18,19,23,30,32,33,34,70,],[4,4,4,4,-8,4,-7,-30,-4,-5,-6,-42,]),'$end':([1,14,30,],[0,-31,-30,]),'ID':([2,3,4,7,15,16,18,19,23,24,25,27,30,32,33,34,42,44,45,46,47,48,49,50,56,64,65,66,67,68,70,],[5,-28,-29,11,26,29,-8,26,-7,38,40,26,-30,-4,-5,-6,51,51,51,-12,-13,-14,-15,-16,51,51,-34,-35,-36,-37,-42,]),'LPAREN':([3,4,5,15,18,19,23,24,25,27,28,30,32,33,34,44,56,70,],[-28,-29,6,27,-8,27,-7,27,27,27,44,-30,-4,-5,-6,56,56,-42,]),'RPAREN':([6,8,9,10,11,29,39,43,51,52,53,54,55,57,59,60,61,62,69,71,],[-1,12,-32,-33,-27,-26,-11,55,-10,-22,-23,-24,-25,63,-39,-40,-9,69,-41,-38,]),'COMMA':([9,11,29,],[13,-27,-26,]),'LBRACE':([12,63,],[15,15,]),'RBRACE':([15,17,18,19,23,30,31,32,33,34,70,],[-1,30,-2,-1,-7,-30,-3,-4,-5,-6,-42,]),'RETURN':([15,18,19,23,30,32,33,34,70,],[24,-8,24,-7,-30,-4,-5,-6,-42,]),'WHILE':([15,18,19,23,30,32,33,34,70,],[28,-8,28,-7,-30,-4,-5,-6,-42,]),'SEMI':([20,21,22,35,36,37,38,39,40,41,51,52,53,54,55,61,],[32,33,34,-17,-18,-19,-10,-11,-20,-21,-10,-22,-23,-24,-25,-9,]),'NUMCONST':([24,42,44,45,46,47,48,49,50,56,64,65,66,67,68,],[39,39,39,39,-12,-13,-14,-15,-16,39,39,-34,-35,-36,-37,]),'EQUALS':([26,38,40,],[42,42,42,]),'PLUS':([35,38,39,51,52,],[46,-10,-11,-10,46,]),'MINUS':([35,38,39,51,52,],[47,-10,-11,-10,47,]),'TIMES':([35,38,39,51,52,],[48,-10,-11,-10,48,]),'DIVIDE':([35,38,39,51,52,],[49,-10,-11,-10,49,]),'MODULO':([35,38,39,51,52,],[50,-10,-11,-10,50,]),'LE':([39,51,58,],[-11,-10,65,]),'GE':([39,51,58,],[-11,-10,66,]),'EQ':([39,51,58,],[-11,-10,67,]),'NE':([39,51,58,],[-11,-10,68,]),'STRING':([42,],[54,]),'TRUE':([44,56,],[59,59,]),'FALSE':([44,56,],[60,60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcDecl':([0,],[1,]),'type_spec':([0,6,13,15,19,],[2,7,16,25,25,]),'args':([6,],[8,]),'type_spec_list':([6,],[9,]),'empty':([6,15,19,],[10,18,18,]),'scope':([12,63,],[14,70,]),'statement_list':([15,19,],[17,31,]),'statement':([15,19,],[19,19,]),'return_stmt':([15,19,],[20,20,]),'var_decl':([15,19,],[21,21,]),'var_assign':([15,19,24,25,27,],[22,22,37,41,43,]),'whileLoop':([15,19,],[23,23,]),'operand':([24,42,44,45,56,64,],[35,52,58,61,58,71,]),'expr':([24,42,],[36,53,]),'bin_op':([35,52,],[45,45,]),'conditionals':([44,56,],[57,62,]),'compOps':([58,],[64,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> funcDecl","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',23),
  ('statement_list -> empty','statement_list',1,'p_statement_list','ply_parser.py',28),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','ply_parser.py',29),
  ('statement -> return_stmt SEMI','statement',2,'p_statement_list','ply_parser.py',30),
  ('statement -> var_decl SEMI','statement',2,'p_statement_list','ply_parser.py',31),
  ('statement -> var_assign SEMI','statement',2,'p_statement_list','ply_parser.py',32),
  ('statement -> whileLoop','statement',1,'p_statement_list','ply_parser.py',33),
  ('statement -> empty','statement',1,'p_statement_list','ply_parser.py',34),
  ('expr -> operand bin_op operand','expr',3,'p_expr','ply_parser.py',38),
  ('operand -> ID','operand',1,'p_operand','ply_parser.py',42),
  ('operand -> NUMCONST','operand',1,'p_operand','ply_parser.py',43),
  ('bin_op -> PLUS','bin_op',1,'p_bin_op','ply_parser.py',47),
  ('bin_op -> MINUS','bin_op',1,'p_bin_op','ply_parser.py',48),
  ('bin_op -> TIMES','bin_op',1,'p_bin_op','ply_parser.py',49),
  ('bin_op -> DIVIDE','bin_op',1,'p_bin_op','ply_parser.py',50),
  ('bin_op -> MODULO','bin_op',1,'p_bin_op','ply_parser.py',51),
  ('return_stmt -> RETURN operand','return_stmt',2,'p_return_stmt','ply_parser.py',57),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','ply_parser.py',58),
  ('return_stmt -> RETURN var_assign','return_stmt',2,'p_return_stmt','ply_parser.py',59),
  ('var_decl -> type_spec ID','var_decl',2,'p_var_decl','ply_parser.py',64),
  ('var_decl -> type_spec var_assign','var_decl',2,'p_var_decl','ply_parser.py',65),
  ('var_assign -> ID EQUALS operand','var_assign',3,'p_var_assign','ply_parser.py',72),
  ('var_assign -> ID EQUALS expr','var_assign',3,'p_var_assign','ply_parser.py',73),
  ('var_assign -> ID EQUALS STRING','var_assign',3,'p_var_assign','ply_parser.py',74),
  ('var_assign -> LPAREN var_assign RPAREN','var_assign',3,'p_var_assign','ply_parser.py',75),
  ('type_spec_list -> type_spec_list COMMA type_spec ID','type_spec_list',4,'p_typeSpec','ply_parser.py',80),
  ('type_spec_list -> type_spec ID','type_spec_list',2,'p_typeSpec','ply_parser.py',81),
  ('type_spec -> INT','type_spec',1,'p_typeSpec','ply_parser.py',82),
  ('type_spec -> CHAR','type_spec',1,'p_typeSpec','ply_parser.py',83),
  ('scope -> LBRACE statement_list RBRACE','scope',3,'p_scope','ply_parser.py',112),
  ('funcDecl -> type_spec ID LPAREN args RPAREN scope','funcDecl',6,'p_funcDeclaration','ply_parser.py',117),
  ('args -> type_spec_list','args',1,'p_funcDeclaration','ply_parser.py',118),
  ('args -> empty','args',1,'p_funcDeclaration','ply_parser.py',119),
  ('compOps -> LE','compOps',1,'p_compOps','ply_parser.py',123),
  ('compOps -> GE','compOps',1,'p_compOps','ply_parser.py',124),
  ('compOps -> EQ','compOps',1,'p_compOps','ply_parser.py',125),
  ('compOps -> NE','compOps',1,'p_compOps','ply_parser.py',126),
  ('conditionals -> operand compOps operand','conditionals',3,'p_conditionals','ply_parser.py',130),
  ('conditionals -> TRUE','conditionals',1,'p_conditionals','ply_parser.py',131),
  ('conditionals -> FALSE','conditionals',1,'p_conditionals','ply_parser.py',132),
  ('conditionals -> LPAREN conditionals RPAREN','conditionals',3,'p_conditionals','ply_parser.py',133),
  ('whileLoop -> WHILE LPAREN conditionals RPAREN scope','whileLoop',5,'p_whileLoop','ply_parser.py',137),
]
