
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'funcDeclAND ANDEQUAL ARROW AUTO BREAK CASE CHAR CHARACTER COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVEQUAL DIVIDE DO DOUBLE DQUOT ELLIPSIS ELSE ENUM EQ EQUALS EXTERN FLOAT FOR GE GOTO ID IF INCREMENT INT LAND LANGLE LBRACE LBRACKET LE LNOT LONG LOR LPAREN LSHIFT LSHIFTEQUAL MINUS MINUSEQUAL MODEQUAL MODULO NE NOT NUMCONST OR OREQUAL PERIOD PLUS PLUSEQUAL RANGLE RBRACE RBRACKET REGISTER RETURN RPAREN RSHIFT RSHIFTEQUAL SEMI SHORT SIGNED SIZEOF SQUOT STATIC STRING STRUCT SWITCH TIMES TIMESEQUAL TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOR XOREQUALempty :\n    statement_list : empty\n                   | statement SEMI statement_list\n                   | whileLoop statement_list\n                   | if_stmt statement_list\n    statement : return_stmt\n              | var_decl\n              | var_assign\n              | goto_stmt\n              | break_stmt\n              | empty\n    \n    expr : expr PLUS multiplicative_expr\n         | expr MINUS multiplicative_expr\n         | multiplicative_expr\n    multiplicative_expr : multiplicative_expr TIMES unary_expr \n                        | multiplicative_expr DIVIDE unary_expr \n                        | multiplicative_expr MODULO unary_expr\n                        | unary_expr    \n    unary_expr : INCREMENT operand\n                | DECREMENT operand\n                | operand INCREMENT\n                | operand DECREMENT\n    operand : ID\n        | NUMCONST\n    \n    return_stmt : RETURN operand\n                | RETURN expr\n                | RETURN var_assign\n    \n    var_decl : type_spec ID\n             | type_spec var_assign \n    \n    var_assign : ID EQUALS operand\n               | ID EQUALS expr\n               | ID EQUALS STRING\n               | LPAREN var_assign RPAREN\n               | ID TIMESEQUAL operand\n               | ID DIVEQUAL operand \n               | ID MODEQUAL operand \n               | ID PLUSEQUAL operand \n               | ID MINUSEQUAL operand \n               | ID LSHIFTEQUAL operand \n               | ID RSHIFTEQUAL operand \n               | ID ANDEQUAL operand\n               | ID OREQUAL operand \n               | ID XOREQUAL operand\n    \n    type_spec_list : type_spec_list COMMA type_spec ID\n                   | type_spec ID\n    type_spec : INT\n              | CHAR\n    \n    scope : LBRACE statement_list RBRACE\n    \n    funcDecl : type_spec ID LPAREN args RPAREN scope\n    args : type_spec_list\n         | empty\n    \n    whileLoop   : WHILE LPAREN conditionals RPAREN scope\n    \n    conditionals    :  operand compOps operand\n\n    compOps :   LE\n                | GE\n                | EQ\n                | NE\n    \n    break_stmt  : BREAK\n    \n    goto_stmt  : GOTO ID \n    \n    if_stmt : IF LPAREN conditionals RPAREN scope\n            | IF LPAREN conditionals RPAREN scope elsiflist\n            \n            \n    elsiflist : ELSE IF LPAREN conditionals RPAREN scope elsiflist\n            | ELSE IF LPAREN conditionals RPAREN scope empty\n            | ELSE scope\n            \n    '
    
_lr_action_items = {'INT':([0,6,13,15,20,21,36,37,107,109,110,113,117,118,119,],[3,3,3,3,3,3,-48,3,-52,-60,-61,-64,-1,-62,-63,]),'CHAR':([0,6,13,15,20,21,36,37,107,109,110,113,117,118,119,],[4,4,4,4,4,4,-48,4,-52,-60,-61,-64,-1,-62,-63,]),'$end':([1,14,36,],[0,-49,-48,]),'ID':([2,3,4,7,15,16,20,21,28,30,31,33,36,37,40,42,50,51,54,55,56,57,58,59,60,61,62,63,64,74,75,76,77,78,95,96,97,98,99,107,109,110,113,114,117,118,119,],[5,-46,-47,11,32,35,32,32,32,46,52,65,-48,32,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-54,-55,-56,-57,-52,-60,-61,-64,69,-1,-62,-63,]),'LPAREN':([3,4,5,15,20,21,27,28,29,30,31,36,37,107,109,110,112,113,117,118,119,],[-46,-47,6,28,28,28,40,28,42,28,28,-48,28,-52,-60,-61,114,-64,-1,-62,-63,]),'RPAREN':([6,8,9,10,11,35,41,47,48,49,67,69,70,71,72,73,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,101,103,104,105,106,108,115,],[-1,12,-50,-51,-45,-44,70,-24,-14,-18,94,-23,-33,100,-21,-22,-19,-20,-30,-31,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-12,-13,-15,-16,-17,-53,116,]),'COMMA':([9,11,35,],[13,-45,-44,]),'LBRACE':([12,94,100,111,116,],[15,15,15,15,15,]),'RBRACE':([15,17,18,20,21,36,37,38,39,66,107,109,110,113,117,118,119,],[-1,36,-2,-1,-1,-48,-1,-4,-5,-3,-52,-60,-61,-64,-1,-62,-63,]),'SEMI':([15,18,19,20,21,22,23,24,25,26,34,36,37,43,44,45,46,47,48,49,52,53,65,69,70,72,73,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,101,103,104,105,106,107,109,110,113,117,118,119,],[-1,-11,37,-1,-1,-6,-7,-8,-9,-10,-58,-48,-1,-25,-26,-27,-23,-24,-14,-18,-28,-29,-59,-23,-33,-21,-22,-19,-20,-30,-31,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-12,-13,-15,-16,-17,-52,-60,-61,-64,-1,-62,-63,]),'WHILE':([15,20,21,36,37,107,109,110,113,117,118,119,],[27,27,27,-48,27,-52,-60,-61,-64,-1,-62,-63,]),'IF':([15,20,21,36,37,107,109,110,111,113,117,118,119,],[29,29,29,-48,29,-52,-60,-61,112,-64,-1,-62,-63,]),'RETURN':([15,20,21,36,37,107,109,110,113,117,118,119,],[30,30,30,-48,30,-52,-60,-61,-64,-1,-62,-63,]),'GOTO':([15,20,21,36,37,107,109,110,113,117,118,119,],[33,33,33,-48,33,-52,-60,-61,-64,-1,-62,-63,]),'BREAK':([15,20,21,36,37,107,109,110,113,117,118,119,],[34,34,34,-48,34,-52,-60,-61,-64,-1,-62,-63,]),'NUMCONST':([30,40,42,50,51,54,55,56,57,58,59,60,61,62,63,64,74,75,76,77,78,95,96,97,98,99,114,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-54,-55,-56,-57,47,]),'INCREMENT':([30,43,46,47,54,69,74,75,76,77,78,81,102,],[50,72,-23,-24,50,-23,50,50,50,50,50,72,72,]),'DECREMENT':([30,43,46,47,54,69,74,75,76,77,78,81,102,],[51,73,-23,-24,51,-23,51,51,51,51,51,73,73,]),'EQUALS':([32,46,52,],[54,54,54,]),'TIMESEQUAL':([32,46,52,],[55,55,55,]),'DIVEQUAL':([32,46,52,],[56,56,56,]),'MODEQUAL':([32,46,52,],[57,57,57,]),'PLUSEQUAL':([32,46,52,],[58,58,58,]),'MINUSEQUAL':([32,46,52,],[59,59,59,]),'LSHIFTEQUAL':([32,46,52,],[60,60,60,]),'RSHIFTEQUAL':([32,46,52,],[61,61,61,]),'ANDEQUAL':([32,46,52,],[62,62,62,]),'OREQUAL':([32,46,52,],[63,63,63,]),'XOREQUAL':([32,46,52,],[64,64,64,]),'ELSE':([36,109,117,],[-48,111,111,]),'PLUS':([44,47,48,49,69,72,73,79,80,82,101,103,104,105,106,],[74,-24,-14,-18,-23,-21,-22,-19,-20,74,-12,-13,-15,-16,-17,]),'MINUS':([44,47,48,49,69,72,73,79,80,82,101,103,104,105,106,],[75,-24,-14,-18,-23,-21,-22,-19,-20,75,-12,-13,-15,-16,-17,]),'LE':([47,68,69,],[-24,96,-23,]),'GE':([47,68,69,],[-24,97,-23,]),'EQ':([47,68,69,],[-24,98,-23,]),'NE':([47,68,69,],[-24,99,-23,]),'TIMES':([47,48,49,69,72,73,79,80,101,103,104,105,106,],[-24,76,-18,-23,-21,-22,-19,-20,76,76,-15,-16,-17,]),'DIVIDE':([47,48,49,69,72,73,79,80,101,103,104,105,106,],[-24,77,-18,-23,-21,-22,-19,-20,77,77,-15,-16,-17,]),'MODULO':([47,48,49,69,72,73,79,80,101,103,104,105,106,],[-24,78,-18,-23,-21,-22,-19,-20,78,78,-15,-16,-17,]),'STRING':([54,],[83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcDecl':([0,],[1,]),'type_spec':([0,6,13,15,20,21,37,],[2,7,16,31,31,31,31,]),'args':([6,],[8,]),'type_spec_list':([6,],[9,]),'empty':([6,15,20,21,37,117,],[10,18,18,18,18,119,]),'scope':([12,94,100,111,116,],[14,107,109,113,117,]),'statement_list':([15,20,21,37,],[17,38,39,66,]),'statement':([15,20,21,37,],[19,19,19,19,]),'whileLoop':([15,20,21,37,],[20,20,20,20,]),'if_stmt':([15,20,21,37,],[21,21,21,21,]),'return_stmt':([15,20,21,37,],[22,22,22,22,]),'var_decl':([15,20,21,37,],[23,23,23,23,]),'var_assign':([15,20,21,28,30,31,37,],[24,24,24,41,45,53,24,]),'goto_stmt':([15,20,21,37,],[25,25,25,25,]),'break_stmt':([15,20,21,37,],[26,26,26,26,]),'operand':([30,40,42,50,51,54,55,56,57,58,59,60,61,62,63,64,74,75,76,77,78,95,114,],[43,68,68,79,80,81,84,85,86,87,88,89,90,91,92,93,102,102,102,102,102,108,68,]),'expr':([30,54,],[44,82,]),'multiplicative_expr':([30,54,74,75,],[48,48,101,103,]),'unary_expr':([30,54,74,75,76,77,78,],[49,49,49,49,104,105,106,]),'conditionals':([40,42,114,],[67,71,115,]),'compOps':([68,],[95,]),'elsiflist':([109,117,],[110,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> funcDecl","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',23),
  ('statement_list -> empty','statement_list',1,'p_statement_list','ply_parser.py',28),
  ('statement_list -> statement SEMI statement_list','statement_list',3,'p_statement_list','ply_parser.py',29),
  ('statement_list -> whileLoop statement_list','statement_list',2,'p_statement_list','ply_parser.py',30),
  ('statement_list -> if_stmt statement_list','statement_list',2,'p_statement_list','ply_parser.py',31),
  ('statement -> return_stmt','statement',1,'p_statement_list','ply_parser.py',32),
  ('statement -> var_decl','statement',1,'p_statement_list','ply_parser.py',33),
  ('statement -> var_assign','statement',1,'p_statement_list','ply_parser.py',34),
  ('statement -> goto_stmt','statement',1,'p_statement_list','ply_parser.py',35),
  ('statement -> break_stmt','statement',1,'p_statement_list','ply_parser.py',36),
  ('statement -> empty','statement',1,'p_statement_list','ply_parser.py',37),
  ('expr -> expr PLUS multiplicative_expr','expr',3,'p_expr','ply_parser.py',44),
  ('expr -> expr MINUS multiplicative_expr','expr',3,'p_expr','ply_parser.py',45),
  ('expr -> multiplicative_expr','expr',1,'p_expr','ply_parser.py',46),
  ('multiplicative_expr -> multiplicative_expr TIMES unary_expr','multiplicative_expr',3,'p_expr','ply_parser.py',47),
  ('multiplicative_expr -> multiplicative_expr DIVIDE unary_expr','multiplicative_expr',3,'p_expr','ply_parser.py',48),
  ('multiplicative_expr -> multiplicative_expr MODULO unary_expr','multiplicative_expr',3,'p_expr','ply_parser.py',49),
  ('multiplicative_expr -> unary_expr','multiplicative_expr',1,'p_expr','ply_parser.py',50),
  ('unary_expr -> INCREMENT operand','unary_expr',2,'p_expr','ply_parser.py',51),
  ('unary_expr -> DECREMENT operand','unary_expr',2,'p_expr','ply_parser.py',52),
  ('unary_expr -> operand INCREMENT','unary_expr',2,'p_expr','ply_parser.py',53),
  ('unary_expr -> operand DECREMENT','unary_expr',2,'p_expr','ply_parser.py',54),
  ('operand -> ID','operand',1,'p_expr','ply_parser.py',55),
  ('operand -> NUMCONST','operand',1,'p_expr','ply_parser.py',56),
  ('return_stmt -> RETURN operand','return_stmt',2,'p_return_stmt','ply_parser.py',70),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','ply_parser.py',71),
  ('return_stmt -> RETURN var_assign','return_stmt',2,'p_return_stmt','ply_parser.py',72),
  ('var_decl -> type_spec ID','var_decl',2,'p_var_decl','ply_parser.py',77),
  ('var_decl -> type_spec var_assign','var_decl',2,'p_var_decl','ply_parser.py',78),
  ('var_assign -> ID EQUALS operand','var_assign',3,'p_var_assign','ply_parser.py',85),
  ('var_assign -> ID EQUALS expr','var_assign',3,'p_var_assign','ply_parser.py',86),
  ('var_assign -> ID EQUALS STRING','var_assign',3,'p_var_assign','ply_parser.py',87),
  ('var_assign -> LPAREN var_assign RPAREN','var_assign',3,'p_var_assign','ply_parser.py',88),
  ('var_assign -> ID TIMESEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',89),
  ('var_assign -> ID DIVEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',90),
  ('var_assign -> ID MODEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',91),
  ('var_assign -> ID PLUSEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',92),
  ('var_assign -> ID MINUSEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',93),
  ('var_assign -> ID LSHIFTEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',94),
  ('var_assign -> ID RSHIFTEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',95),
  ('var_assign -> ID ANDEQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',96),
  ('var_assign -> ID OREQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',97),
  ('var_assign -> ID XOREQUAL operand','var_assign',3,'p_var_assign','ply_parser.py',98),
  ('type_spec_list -> type_spec_list COMMA type_spec ID','type_spec_list',4,'p_typeSpec','ply_parser.py',103),
  ('type_spec_list -> type_spec ID','type_spec_list',2,'p_typeSpec','ply_parser.py',104),
  ('type_spec -> INT','type_spec',1,'p_typeSpec','ply_parser.py',105),
  ('type_spec -> CHAR','type_spec',1,'p_typeSpec','ply_parser.py',106),
  ('scope -> LBRACE statement_list RBRACE','scope',3,'p_scope','ply_parser.py',135),
  ('funcDecl -> type_spec ID LPAREN args RPAREN scope','funcDecl',6,'p_funcDeclaration','ply_parser.py',140),
  ('args -> type_spec_list','args',1,'p_funcDeclaration','ply_parser.py',141),
  ('args -> empty','args',1,'p_funcDeclaration','ply_parser.py',142),
  ('whileLoop -> WHILE LPAREN conditionals RPAREN scope','whileLoop',5,'p_whileLoop','ply_parser.py',146),
  ('conditionals -> operand compOps operand','conditionals',3,'p_conditionals','ply_parser.py',150),
  ('compOps -> LE','compOps',1,'p_conditionals','ply_parser.py',152),
  ('compOps -> GE','compOps',1,'p_conditionals','ply_parser.py',153),
  ('compOps -> EQ','compOps',1,'p_conditionals','ply_parser.py',154),
  ('compOps -> NE','compOps',1,'p_conditionals','ply_parser.py',155),
  ('break_stmt -> BREAK','break_stmt',1,'p_breakStmt','ply_parser.py',160),
  ('goto_stmt -> GOTO ID','goto_stmt',2,'p_gotoStmt','ply_parser.py',164),
  ('if_stmt -> IF LPAREN conditionals RPAREN scope','if_stmt',5,'p_ifStmt','ply_parser.py',170),
  ('if_stmt -> IF LPAREN conditionals RPAREN scope elsiflist','if_stmt',6,'p_ifStmt','ply_parser.py',171),
  ('elsiflist -> ELSE IF LPAREN conditionals RPAREN scope elsiflist','elsiflist',7,'p_ifStmt','ply_parser.py',174),
  ('elsiflist -> ELSE IF LPAREN conditionals RPAREN scope empty','elsiflist',7,'p_ifStmt','ply_parser.py',175),
  ('elsiflist -> ELSE scope','elsiflist',2,'p_ifStmt','ply_parser.py',176),
]
