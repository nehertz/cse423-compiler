Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    DEFINE
    DQUOT
    ELLIPSIS
    INCLUDE
    SQUOT
    VOID

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> declarationList
Rule 3     declarationList -> declarationList declaration
Rule 4     declarationList -> declaration
Rule 5     declaration -> PREPROC
Rule 6     declaration -> varDecl SEMI
Rule 7     declaration -> enumDeclaration
Rule 8     enumInScope -> ENUM ID ID SEMI
Rule 9     enumDeclaration -> funcList
Rule 10    enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI
Rule 11    enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI
Rule 12    enumDeclaration -> ENUM ID ID SEMI
Rule 13    enumArgs -> enumIDList
Rule 14    enumArgs -> enumArgs COMMA enumIDList
Rule 15    enumIDList -> ID
Rule 16    enumIDList -> ID EQUALS NUMCONST
Rule 17    funcList -> typeSpec ID LPAREN args RPAREN scope
Rule 18    args -> typeSpecList
Rule 19    args -> operandList
Rule 20    args -> empty
Rule 21    operandList -> operandList COMMA operand
Rule 22    operandList -> operand
Rule 23    operand -> ID afterID
Rule 24    operand -> NUMCONST
Rule 25    operand -> funcCall
Rule 26    operand -> LPAREN expr RPAREN
Rule 27    operand -> MINUS NUMCONST
Rule 28    afterID -> <empty>
Rule 29    scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE
Rule 30    afterRBRACE -> <empty>
Rule 31    afterLBRACE -> <empty>
Rule 32    loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace
Rule 33    afterLoopLBrace -> <empty>
Rule 34    afterLoopRBrace -> <empty>
Rule 35    loopStatementList -> breakStmt SEMI loopStatementList
Rule 36    loopStatementList -> continueStmt SEMI loopStatementList
Rule 37    loopStatementList -> statementList
Rule 38    continueStmt -> CONTINUE
Rule 39    varDeclList -> varDeclList varDecl SEMI
Rule 40    varDeclList -> varDecl SEMI
Rule 41    varDecl -> combineTypeSpec
Rule 42    varDecl -> typeSpec ID
Rule 43    varDecl -> typeSpec varAssign afterVarAssign
Rule 44    varDecl -> combineTypeSpec ID
Rule 45    varDecl -> TYPEDEF typeSpec ID
Rule 46    varDecl -> TYPEDEF combineTypeSpec ID
Rule 47    varDecl -> EXTERN typeSpecPostfix ID
Rule 48    varDecl -> CONST EXTERN typeSpecPostfix ID
Rule 49    afterVarAssign -> <empty>
Rule 50    typeSpecList -> typeSpecList COMMA typeSpec ID
Rule 51    typeSpecList -> typeSpec ID
Rule 52    typeSpec -> AUTO typeSpecPostfix
Rule 53    typeSpec -> VOLATILE typeSpecPostfix
Rule 54    typeSpec -> VOLATILE STATIC typeSpecPostfix
Rule 55    typeSpec -> STATIC typeSpecPostfix
Rule 56    typeSpec -> CONST typeSpecPostfix
Rule 57    typeSpec -> REGISTER typeSpecPostfix
Rule 58    typeSpec -> REGISTER STATIC typeSpecPostfix
Rule 59    typeSpec -> typeSpecPostfix
Rule 60    typeSpec -> combineType
Rule 61    combineTypeSpec -> combineType LBRACE varDeclList RBRACE
Rule 62    combineType -> STRUCT ID
Rule 63    combineType -> UNION ID
Rule 64    typeSpecPostfix -> INT
Rule 65    typeSpecPostfix -> CHAR
Rule 66    typeSpecPostfix -> SHORT
Rule 67    typeSpecPostfix -> LONG
Rule 68    typeSpecPostfix -> FLOAT
Rule 69    typeSpecPostfix -> DOUBLE
Rule 70    typeSpecPostfix -> UNSIGNED INT
Rule 71    typeSpecPostfix -> SIGNED INT
Rule 72    typeSpecPostfix -> SHORT INT
Rule 73    typeSpecPostfix -> LONG INT
Rule 74    typeSpecPostfix -> LONG LONG INT
Rule 75    typeSpecPostfix -> UNSIGNED CHAR
Rule 76    typeSpecPostfix -> SIGNED CHAR
Rule 77    typeSpecPostfix -> LONG LONG
Rule 78    typeSpecPostfix -> SIGNED LONG
Rule 79    typeSpecPostfix -> UNSIGNED LONG
Rule 80    typeSpecPostfix -> LONG DOUBLE
Rule 81    typeSpecPostfix -> SIGNED SHORT
Rule 82    typeSpecPostfix -> UNSIGNED SHORT
Rule 83    statementList -> empty
Rule 84    statementList -> statement SEMI statementList
Rule 85    statementList -> whileLoop statementList
Rule 86    statementList -> ifStmt statementList
Rule 87    statementList -> forLoop statementList
Rule 88    statementList -> switch statementList
Rule 89    statementList -> enumInScope statementList
Rule 90    statement -> returnStmt
Rule 91    statement -> varDecl
Rule 92    statement -> varAssign
Rule 93    statement -> gotoStmt
Rule 94    statement -> expr
Rule 95    statement -> empty
Rule 96    statement -> doWhile
Rule 97    whileLoop -> WHILE LPAREN conditionals RPAREN loopScope
Rule 98    ifStmt -> IF LPAREN conditionals RPAREN conditionalScope
Rule 99    ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList
Rule 100   elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList
Rule 101   elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope
Rule 102   elseIfList -> ELSE conditionalScope
Rule 103   conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace
Rule 104   doWhile -> DO loopScope WHILE LPAREN conditionals RPAREN
Rule 105   forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
Rule 106   forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
Rule 107   forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
Rule 108   forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
Rule 109   init -> typeSpec varAssign
Rule 110   init -> varAssign
Rule 111   increase -> varAssign
Rule 112   increase -> INCREMENT ID
Rule 113   increase -> DECREMENT ID
Rule 114   increase -> ID INCREMENT
Rule 115   increase -> ID DECREMENT
Rule 116   switch -> SWITCH LPAREN expr RPAREN switchscope
Rule 117   switchscope -> LBRACE caseList RBRACE
Rule 118   caseList -> CASE operand COLON statementList caseList
Rule 119   caseList -> CASE CHARACTER COLON statementList caseList
Rule 120   caseList -> CASE operand COLON statementList
Rule 121   caseList -> CASE CHARACTER COLON statementList
Rule 122   caseList -> DEFAULT COLON statementList
Rule 123   returnStmt -> RETURN expr
Rule 124   returnStmt -> RETURN varAssign
Rule 125   gotoStmt -> GOTO ID
Rule 126   breakStmt -> BREAK
Rule 127   funcCall -> ID LPAREN args RPAREN
Rule 128   expr -> logicalExpr
Rule 129   logicalExpr -> compOps
Rule 130   logicalExpr -> logicalExpr LOR compOps
Rule 131   logicalExpr -> logicalExpr LAND compOps
Rule 132   logicalExpr -> logicalExpr OR compOps
Rule 133   logicalExpr -> logicalExpr XOR compOps
Rule 134   logicalExpr -> logicalExpr AND compOps
Rule 135   compOps -> shiftExpr
Rule 136   compOps -> compOps EQ shiftExpr
Rule 137   compOps -> compOps NE shiftExpr
Rule 138   compOps -> compOps LE shiftExpr
Rule 139   compOps -> compOps GE shiftExpr
Rule 140   compOps -> compOps LANGLE shiftExpr
Rule 141   compOps -> compOps RANGLE shiftExpr
Rule 142   shiftExpr -> additiveExpr
Rule 143   shiftExpr -> shiftExpr LSHIFT additiveExpr
Rule 144   shiftExpr -> shiftExpr RSHIFT additiveExpr
Rule 145   additiveExpr -> additiveExpr PLUS multiplicativeExpr
Rule 146   additiveExpr -> additiveExpr MINUS multiplicativeExpr
Rule 147   additiveExpr -> multiplicativeExpr
Rule 148   multiplicativeExpr -> multiplicativeExpr TIMES castExpr
Rule 149   multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr
Rule 150   multiplicativeExpr -> multiplicativeExpr MODULO castExpr
Rule 151   multiplicativeExpr -> castExpr
Rule 152   castExpr -> unaryExpr
Rule 153   castExpr -> LPAREN typeSpec RPAREN castExpr
Rule 154   unaryExpr -> postfixExpr
Rule 155   unaryExpr -> LNOT unaryExpr
Rule 156   unaryExpr -> NOT unaryExpr
Rule 157   unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN
Rule 158   unaryExpr -> SIZEOF LPAREN typeSpec RPAREN
Rule 159   unaryExpr -> unaryExpr INCREMENT
Rule 160   unaryExpr -> unaryExpr DECREMENT
Rule 161   postfixExpr -> operand
Rule 162   postfixExpr -> postfixExpr PERIOD ID
Rule 163   postfixExpr -> postfixExpr LBRACKET expr RBRACKET
Rule 164   postfixExpr -> INCREMENT postfixExpr
Rule 165   postfixExpr -> DECREMENT postfixExpr
Rule 166   varAssign -> ID EQUALS expr
Rule 167   varAssign -> ID EQUALS STRING
Rule 168   varAssign -> LPAREN varAssign RPAREN
Rule 169   varAssign -> ID TIMESEQUAL expr
Rule 170   varAssign -> ID DIVEQUAL expr
Rule 171   varAssign -> ID MODEQUAL expr
Rule 172   varAssign -> ID PLUSEQUAL expr
Rule 173   varAssign -> ID MINUSEQUAL expr
Rule 174   varAssign -> ID LSHIFTEQUAL expr
Rule 175   varAssign -> ID RSHIFTEQUAL expr
Rule 176   varAssign -> ID ANDEQUAL expr
Rule 177   varAssign -> ID OREQUAL expr
Rule 178   varAssign -> ID XOREQUAL expr
Rule 179   conditionals -> expr
Rule 180   conditionals -> TRUE
Rule 181   conditionals -> FALSE
Rule 182   conditionals -> LPAREN conditionals RPAREN

Terminals, with rules where they appear

AND                  : 134
ANDEQUAL             : 176
ARROW                : 
AUTO                 : 52
BREAK                : 126
CASE                 : 118 119 120 121
CHAR                 : 65 75 76
CHARACTER            : 119 121
COLON                : 118 119 120 121 122
COMMA                : 14 21 50
CONST                : 48 56
CONTINUE             : 38
DECREMENT            : 113 115 160 165
DEFAULT              : 122
DEFINE               : 
DIVEQUAL             : 170
DIVIDE               : 149
DO                   : 104
DOUBLE               : 69 80
DQUOT                : 
ELLIPSIS             : 
ELSE                 : 100 101 102
ENUM                 : 8 10 11 12
EQ                   : 136
EQUALS               : 16 166 167
EXTERN               : 47 48
FALSE                : 181
FLOAT                : 68
FOR                  : 105 106 107 108
GE                   : 139
GOTO                 : 125
ID                   : 8 8 10 12 12 15 16 17 23 42 44 45 46 47 48 50 51 62 63 112 113 114 115 125 127 162 166 167 169 170 171 172 173 174 175 176 177 178
IF                   : 98 99 100 101
INCLUDE              : 
INCREMENT            : 112 114 159 164
INT                  : 64 70 71 72 73 74
LAND                 : 131
LANGLE               : 140
LBRACE               : 10 11 29 32 61 103 117
LBRACKET             : 163
LE                   : 138
LNOT                 : 155
LONG                 : 67 73 74 74 77 77 78 79 80
LOR                  : 130
LPAREN               : 17 26 97 98 99 100 101 104 105 106 107 108 116 127 153 157 158 168 182
LSHIFT               : 143
LSHIFTEQUAL          : 174
MINUS                : 27 146
MINUSEQUAL           : 173
MODEQUAL             : 171
MODULO               : 150
NE                   : 137
NOT                  : 156
NUMCONST             : 16 24 27
OR                   : 132
OREQUAL              : 177
PERIOD               : 162
PLUS                 : 145
PLUSEQUAL            : 172
PREPROC              : 5
RANGLE               : 141
RBRACE               : 10 11 29 32 61 103 117
RBRACKET             : 163
REGISTER             : 57 58
RETURN               : 123 124
RPAREN               : 17 26 97 98 99 100 101 104 105 106 107 108 116 127 153 157 158 168 182
RSHIFT               : 144
RSHIFTEQUAL          : 175
SEMI                 : 6 8 10 11 12 35 36 39 40 84 105 105 106 106 107 107 108 108
SHORT                : 66 72 81 82
SIGNED               : 71 76 78 81
SIZEOF               : 157 158
SQUOT                : 
STATIC               : 54 55 58
STRING               : 167
STRUCT               : 62
SWITCH               : 116
TIMES                : 148
TIMESEQUAL           : 169
TRUE                 : 180
TYPEDEF              : 45 46
UNION                : 63
UNSIGNED             : 70 75 79 82
VOID                 : 
VOLATILE             : 53 54
WHILE                : 97 104
XOR                  : 133
XOREQUAL             : 178
error                : 

Nonterminals, with rules where they appear

additiveExpr         : 142 143 144 145 146
afterID              : 23
afterLBRACE          : 29
afterLoopLBrace      : 32 103
afterLoopRBrace      : 32 103
afterRBRACE          : 29
afterVarAssign       : 43
args                 : 17 127
breakStmt            : 35
caseList             : 117 118 119
castExpr             : 148 149 150 151 153
combineType          : 60 61
combineTypeSpec      : 41 44 46
compOps              : 105 106 107 108 129 130 131 132 133 134 136 137 138 139 140 141
conditionalScope     : 98 99 100 101 102
conditionals         : 97 98 99 100 101 104 182
continueStmt         : 36
declaration          : 3 4
declarationList      : 2 3
doWhile              : 96
elseIfList           : 99 100
empty                : 20 83 95 105 105 106 107
enumArgs             : 10 11 14
enumDeclaration      : 7
enumIDList           : 13 14
enumInScope          : 89
expr                 : 26 94 116 123 163 166 169 170 171 172 173 174 175 176 177 178 179
forLoop              : 87
funcCall             : 25
funcList             : 9
gotoStmt             : 93
ifStmt               : 86
increase             : 107 108
init                 : 106 108
logicalExpr          : 128 130 131 132 133 134
loopScope            : 97 104 105 106 107 108
loopStatementList    : 32 35 36
multiplicativeExpr   : 145 146 147 148 149 150
operand              : 21 22 118 120 161
operandList          : 19 21
postfixExpr          : 154 162 163 164 165
program              : 0
returnStmt           : 90
scope                : 17
shiftExpr            : 135 136 137 138 139 140 141 143 144
statement            : 84
statementList        : 29 37 84 85 86 87 88 89 103 118 119 120 121 122
switch               : 88
switchscope          : 116
typeSpec             : 17 42 43 45 50 51 109 153 158
typeSpecList         : 18 50
typeSpecPostfix      : 47 48 52 53 54 55 56 57 58 59
unaryExpr            : 152 155 156 157 159 160
varAssign            : 43 92 109 110 111 124 168
varDecl              : 6 39 40 91
varDeclList          : 39 61
whileLoop            : 85

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . declarationList
    (3) declarationList -> . declarationList declaration
    (4) declarationList -> . declaration
    (5) declaration -> . PREPROC
    (6) declaration -> . varDecl SEMI
    (7) declaration -> . enumDeclaration
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (9) enumDeclaration -> . funcList
    (10) enumDeclaration -> . ENUM ID LBRACE enumArgs RBRACE SEMI
    (11) enumDeclaration -> . ENUM LBRACE enumArgs RBRACE SEMI
    (12) enumDeclaration -> . ENUM ID ID SEMI
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (17) funcList -> . typeSpec ID LPAREN args RPAREN scope
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    PREPROC         shift and go to state 4
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ENUM            shift and go to state 14
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    declaration                    shift and go to state 3
    varDecl                        shift and go to state 5
    enumDeclaration                shift and go to state 6
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 8
    typeSpecPostfix                shift and go to state 11
    funcList                       shift and go to state 13
    combineType                    shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (2) program -> declarationList .
    (3) declarationList -> declarationList . declaration
    (5) declaration -> . PREPROC
    (6) declaration -> . varDecl SEMI
    (7) declaration -> . enumDeclaration
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (9) enumDeclaration -> . funcList
    (10) enumDeclaration -> . ENUM ID LBRACE enumArgs RBRACE SEMI
    (11) enumDeclaration -> . ENUM LBRACE enumArgs RBRACE SEMI
    (12) enumDeclaration -> . ENUM ID ID SEMI
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (17) funcList -> . typeSpec ID LPAREN args RPAREN scope
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    $end            reduce using rule 2 (program -> declarationList .)
    PREPROC         shift and go to state 4
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ENUM            shift and go to state 14
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    declaration                    shift and go to state 30
    varDecl                        shift and go to state 5
    enumDeclaration                shift and go to state 6
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 8
    typeSpecPostfix                shift and go to state 11
    funcList                       shift and go to state 13
    combineType                    shift and go to state 15

state 3

    (4) declarationList -> declaration .

    PREPROC         reduce using rule 4 (declarationList -> declaration .)
    TYPEDEF         reduce using rule 4 (declarationList -> declaration .)
    EXTERN          reduce using rule 4 (declarationList -> declaration .)
    CONST           reduce using rule 4 (declarationList -> declaration .)
    ENUM            reduce using rule 4 (declarationList -> declaration .)
    AUTO            reduce using rule 4 (declarationList -> declaration .)
    VOLATILE        reduce using rule 4 (declarationList -> declaration .)
    STATIC          reduce using rule 4 (declarationList -> declaration .)
    REGISTER        reduce using rule 4 (declarationList -> declaration .)
    STRUCT          reduce using rule 4 (declarationList -> declaration .)
    UNION           reduce using rule 4 (declarationList -> declaration .)
    INT             reduce using rule 4 (declarationList -> declaration .)
    CHAR            reduce using rule 4 (declarationList -> declaration .)
    SHORT           reduce using rule 4 (declarationList -> declaration .)
    LONG            reduce using rule 4 (declarationList -> declaration .)
    FLOAT           reduce using rule 4 (declarationList -> declaration .)
    DOUBLE          reduce using rule 4 (declarationList -> declaration .)
    UNSIGNED        reduce using rule 4 (declarationList -> declaration .)
    SIGNED          reduce using rule 4 (declarationList -> declaration .)
    $end            reduce using rule 4 (declarationList -> declaration .)


state 4

    (5) declaration -> PREPROC .

    PREPROC         reduce using rule 5 (declaration -> PREPROC .)
    TYPEDEF         reduce using rule 5 (declaration -> PREPROC .)
    EXTERN          reduce using rule 5 (declaration -> PREPROC .)
    CONST           reduce using rule 5 (declaration -> PREPROC .)
    ENUM            reduce using rule 5 (declaration -> PREPROC .)
    AUTO            reduce using rule 5 (declaration -> PREPROC .)
    VOLATILE        reduce using rule 5 (declaration -> PREPROC .)
    STATIC          reduce using rule 5 (declaration -> PREPROC .)
    REGISTER        reduce using rule 5 (declaration -> PREPROC .)
    STRUCT          reduce using rule 5 (declaration -> PREPROC .)
    UNION           reduce using rule 5 (declaration -> PREPROC .)
    INT             reduce using rule 5 (declaration -> PREPROC .)
    CHAR            reduce using rule 5 (declaration -> PREPROC .)
    SHORT           reduce using rule 5 (declaration -> PREPROC .)
    LONG            reduce using rule 5 (declaration -> PREPROC .)
    FLOAT           reduce using rule 5 (declaration -> PREPROC .)
    DOUBLE          reduce using rule 5 (declaration -> PREPROC .)
    UNSIGNED        reduce using rule 5 (declaration -> PREPROC .)
    SIGNED          reduce using rule 5 (declaration -> PREPROC .)
    $end            reduce using rule 5 (declaration -> PREPROC .)


state 5

    (6) declaration -> varDecl . SEMI

    SEMI            shift and go to state 31


state 6

    (7) declaration -> enumDeclaration .

    PREPROC         reduce using rule 7 (declaration -> enumDeclaration .)
    TYPEDEF         reduce using rule 7 (declaration -> enumDeclaration .)
    EXTERN          reduce using rule 7 (declaration -> enumDeclaration .)
    CONST           reduce using rule 7 (declaration -> enumDeclaration .)
    ENUM            reduce using rule 7 (declaration -> enumDeclaration .)
    AUTO            reduce using rule 7 (declaration -> enumDeclaration .)
    VOLATILE        reduce using rule 7 (declaration -> enumDeclaration .)
    STATIC          reduce using rule 7 (declaration -> enumDeclaration .)
    REGISTER        reduce using rule 7 (declaration -> enumDeclaration .)
    STRUCT          reduce using rule 7 (declaration -> enumDeclaration .)
    UNION           reduce using rule 7 (declaration -> enumDeclaration .)
    INT             reduce using rule 7 (declaration -> enumDeclaration .)
    CHAR            reduce using rule 7 (declaration -> enumDeclaration .)
    SHORT           reduce using rule 7 (declaration -> enumDeclaration .)
    LONG            reduce using rule 7 (declaration -> enumDeclaration .)
    FLOAT           reduce using rule 7 (declaration -> enumDeclaration .)
    DOUBLE          reduce using rule 7 (declaration -> enumDeclaration .)
    UNSIGNED        reduce using rule 7 (declaration -> enumDeclaration .)
    SIGNED          reduce using rule 7 (declaration -> enumDeclaration .)
    $end            reduce using rule 7 (declaration -> enumDeclaration .)


state 7

    (41) varDecl -> combineTypeSpec .
    (44) varDecl -> combineTypeSpec . ID

    SEMI            reduce using rule 41 (varDecl -> combineTypeSpec .)
    ID              shift and go to state 32


state 8

    (42) varDecl -> typeSpec . ID
    (43) varDecl -> typeSpec . varAssign afterVarAssign
    (17) funcList -> typeSpec . ID LPAREN args RPAREN scope
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr

    ID              shift and go to state 33
    LPAREN          shift and go to state 35

    varAssign                      shift and go to state 34

state 9

    (45) varDecl -> TYPEDEF . typeSpec ID
    (46) varDecl -> TYPEDEF . combineTypeSpec ID
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID

    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21

    typeSpec                       shift and go to state 36
    combineTypeSpec                shift and go to state 37
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 39

state 10

    (47) varDecl -> EXTERN . typeSpecPostfix ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 40

state 11

    (59) typeSpec -> typeSpecPostfix .

    ID              reduce using rule 59 (typeSpec -> typeSpecPostfix .)
    LPAREN          reduce using rule 59 (typeSpec -> typeSpecPostfix .)
    RPAREN          reduce using rule 59 (typeSpec -> typeSpecPostfix .)


state 12

    (48) varDecl -> CONST . EXTERN typeSpecPostfix ID
    (56) typeSpec -> CONST . typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    EXTERN          shift and go to state 41
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 42

state 13

    (9) enumDeclaration -> funcList .

    PREPROC         reduce using rule 9 (enumDeclaration -> funcList .)
    TYPEDEF         reduce using rule 9 (enumDeclaration -> funcList .)
    EXTERN          reduce using rule 9 (enumDeclaration -> funcList .)
    CONST           reduce using rule 9 (enumDeclaration -> funcList .)
    ENUM            reduce using rule 9 (enumDeclaration -> funcList .)
    AUTO            reduce using rule 9 (enumDeclaration -> funcList .)
    VOLATILE        reduce using rule 9 (enumDeclaration -> funcList .)
    STATIC          reduce using rule 9 (enumDeclaration -> funcList .)
    REGISTER        reduce using rule 9 (enumDeclaration -> funcList .)
    STRUCT          reduce using rule 9 (enumDeclaration -> funcList .)
    UNION           reduce using rule 9 (enumDeclaration -> funcList .)
    INT             reduce using rule 9 (enumDeclaration -> funcList .)
    CHAR            reduce using rule 9 (enumDeclaration -> funcList .)
    SHORT           reduce using rule 9 (enumDeclaration -> funcList .)
    LONG            reduce using rule 9 (enumDeclaration -> funcList .)
    FLOAT           reduce using rule 9 (enumDeclaration -> funcList .)
    DOUBLE          reduce using rule 9 (enumDeclaration -> funcList .)
    UNSIGNED        reduce using rule 9 (enumDeclaration -> funcList .)
    SIGNED          reduce using rule 9 (enumDeclaration -> funcList .)
    $end            reduce using rule 9 (enumDeclaration -> funcList .)


state 14

    (10) enumDeclaration -> ENUM . ID LBRACE enumArgs RBRACE SEMI
    (11) enumDeclaration -> ENUM . LBRACE enumArgs RBRACE SEMI
    (12) enumDeclaration -> ENUM . ID ID SEMI

    ID              shift and go to state 43
    LBRACE          shift and go to state 44


state 15

    (61) combineTypeSpec -> combineType . LBRACE varDeclList RBRACE
    (60) typeSpec -> combineType .

    LBRACE          shift and go to state 45
    ID              reduce using rule 60 (typeSpec -> combineType .)
    LPAREN          reduce using rule 60 (typeSpec -> combineType .)


state 16

    (52) typeSpec -> AUTO . typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 46

state 17

    (53) typeSpec -> VOLATILE . typeSpecPostfix
    (54) typeSpec -> VOLATILE . STATIC typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    STATIC          shift and go to state 48
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 47

state 18

    (55) typeSpec -> STATIC . typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 49

state 19

    (57) typeSpec -> REGISTER . typeSpecPostfix
    (58) typeSpec -> REGISTER . STATIC typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    STATIC          shift and go to state 51
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 50

state 20

    (62) combineType -> STRUCT . ID

    ID              shift and go to state 52


state 21

    (63) combineType -> UNION . ID

    ID              shift and go to state 53


state 22

    (64) typeSpecPostfix -> INT .

    ID              reduce using rule 64 (typeSpecPostfix -> INT .)
    LPAREN          reduce using rule 64 (typeSpecPostfix -> INT .)
    RPAREN          reduce using rule 64 (typeSpecPostfix -> INT .)


state 23

    (65) typeSpecPostfix -> CHAR .

    ID              reduce using rule 65 (typeSpecPostfix -> CHAR .)
    LPAREN          reduce using rule 65 (typeSpecPostfix -> CHAR .)
    RPAREN          reduce using rule 65 (typeSpecPostfix -> CHAR .)


state 24

    (66) typeSpecPostfix -> SHORT .
    (72) typeSpecPostfix -> SHORT . INT

    ID              reduce using rule 66 (typeSpecPostfix -> SHORT .)
    LPAREN          reduce using rule 66 (typeSpecPostfix -> SHORT .)
    RPAREN          reduce using rule 66 (typeSpecPostfix -> SHORT .)
    INT             shift and go to state 54


state 25

    (67) typeSpecPostfix -> LONG .
    (73) typeSpecPostfix -> LONG . INT
    (74) typeSpecPostfix -> LONG . LONG INT
    (77) typeSpecPostfix -> LONG . LONG
    (80) typeSpecPostfix -> LONG . DOUBLE

    ID              reduce using rule 67 (typeSpecPostfix -> LONG .)
    LPAREN          reduce using rule 67 (typeSpecPostfix -> LONG .)
    RPAREN          reduce using rule 67 (typeSpecPostfix -> LONG .)
    INT             shift and go to state 56
    LONG            shift and go to state 55
    DOUBLE          shift and go to state 57


state 26

    (68) typeSpecPostfix -> FLOAT .

    ID              reduce using rule 68 (typeSpecPostfix -> FLOAT .)
    LPAREN          reduce using rule 68 (typeSpecPostfix -> FLOAT .)
    RPAREN          reduce using rule 68 (typeSpecPostfix -> FLOAT .)


state 27

    (69) typeSpecPostfix -> DOUBLE .

    ID              reduce using rule 69 (typeSpecPostfix -> DOUBLE .)
    LPAREN          reduce using rule 69 (typeSpecPostfix -> DOUBLE .)
    RPAREN          reduce using rule 69 (typeSpecPostfix -> DOUBLE .)


state 28

    (70) typeSpecPostfix -> UNSIGNED . INT
    (75) typeSpecPostfix -> UNSIGNED . CHAR
    (79) typeSpecPostfix -> UNSIGNED . LONG
    (82) typeSpecPostfix -> UNSIGNED . SHORT

    INT             shift and go to state 58
    CHAR            shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61


state 29

    (71) typeSpecPostfix -> SIGNED . INT
    (76) typeSpecPostfix -> SIGNED . CHAR
    (78) typeSpecPostfix -> SIGNED . LONG
    (81) typeSpecPostfix -> SIGNED . SHORT

    INT             shift and go to state 62
    CHAR            shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65


state 30

    (3) declarationList -> declarationList declaration .

    PREPROC         reduce using rule 3 (declarationList -> declarationList declaration .)
    TYPEDEF         reduce using rule 3 (declarationList -> declarationList declaration .)
    EXTERN          reduce using rule 3 (declarationList -> declarationList declaration .)
    CONST           reduce using rule 3 (declarationList -> declarationList declaration .)
    ENUM            reduce using rule 3 (declarationList -> declarationList declaration .)
    AUTO            reduce using rule 3 (declarationList -> declarationList declaration .)
    VOLATILE        reduce using rule 3 (declarationList -> declarationList declaration .)
    STATIC          reduce using rule 3 (declarationList -> declarationList declaration .)
    REGISTER        reduce using rule 3 (declarationList -> declarationList declaration .)
    STRUCT          reduce using rule 3 (declarationList -> declarationList declaration .)
    UNION           reduce using rule 3 (declarationList -> declarationList declaration .)
    INT             reduce using rule 3 (declarationList -> declarationList declaration .)
    CHAR            reduce using rule 3 (declarationList -> declarationList declaration .)
    SHORT           reduce using rule 3 (declarationList -> declarationList declaration .)
    LONG            reduce using rule 3 (declarationList -> declarationList declaration .)
    FLOAT           reduce using rule 3 (declarationList -> declarationList declaration .)
    DOUBLE          reduce using rule 3 (declarationList -> declarationList declaration .)
    UNSIGNED        reduce using rule 3 (declarationList -> declarationList declaration .)
    SIGNED          reduce using rule 3 (declarationList -> declarationList declaration .)
    $end            reduce using rule 3 (declarationList -> declarationList declaration .)


state 31

    (6) declaration -> varDecl SEMI .

    PREPROC         reduce using rule 6 (declaration -> varDecl SEMI .)
    TYPEDEF         reduce using rule 6 (declaration -> varDecl SEMI .)
    EXTERN          reduce using rule 6 (declaration -> varDecl SEMI .)
    CONST           reduce using rule 6 (declaration -> varDecl SEMI .)
    ENUM            reduce using rule 6 (declaration -> varDecl SEMI .)
    AUTO            reduce using rule 6 (declaration -> varDecl SEMI .)
    VOLATILE        reduce using rule 6 (declaration -> varDecl SEMI .)
    STATIC          reduce using rule 6 (declaration -> varDecl SEMI .)
    REGISTER        reduce using rule 6 (declaration -> varDecl SEMI .)
    STRUCT          reduce using rule 6 (declaration -> varDecl SEMI .)
    UNION           reduce using rule 6 (declaration -> varDecl SEMI .)
    INT             reduce using rule 6 (declaration -> varDecl SEMI .)
    CHAR            reduce using rule 6 (declaration -> varDecl SEMI .)
    SHORT           reduce using rule 6 (declaration -> varDecl SEMI .)
    LONG            reduce using rule 6 (declaration -> varDecl SEMI .)
    FLOAT           reduce using rule 6 (declaration -> varDecl SEMI .)
    DOUBLE          reduce using rule 6 (declaration -> varDecl SEMI .)
    UNSIGNED        reduce using rule 6 (declaration -> varDecl SEMI .)
    SIGNED          reduce using rule 6 (declaration -> varDecl SEMI .)
    $end            reduce using rule 6 (declaration -> varDecl SEMI .)


state 32

    (44) varDecl -> combineTypeSpec ID .

    SEMI            reduce using rule 44 (varDecl -> combineTypeSpec ID .)


state 33

    (42) varDecl -> typeSpec ID .
    (17) funcList -> typeSpec ID . LPAREN args RPAREN scope
    (166) varAssign -> ID . EQUALS expr
    (167) varAssign -> ID . EQUALS STRING
    (169) varAssign -> ID . TIMESEQUAL expr
    (170) varAssign -> ID . DIVEQUAL expr
    (171) varAssign -> ID . MODEQUAL expr
    (172) varAssign -> ID . PLUSEQUAL expr
    (173) varAssign -> ID . MINUSEQUAL expr
    (174) varAssign -> ID . LSHIFTEQUAL expr
    (175) varAssign -> ID . RSHIFTEQUAL expr
    (176) varAssign -> ID . ANDEQUAL expr
    (177) varAssign -> ID . OREQUAL expr
    (178) varAssign -> ID . XOREQUAL expr

    SEMI            reduce using rule 42 (varDecl -> typeSpec ID .)
    LPAREN          shift and go to state 66
    EQUALS          shift and go to state 67
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 69
    MODEQUAL        shift and go to state 70
    PLUSEQUAL       shift and go to state 71
    MINUSEQUAL      shift and go to state 72
    LSHIFTEQUAL     shift and go to state 73
    RSHIFTEQUAL     shift and go to state 74
    ANDEQUAL        shift and go to state 75
    OREQUAL         shift and go to state 76
    XOREQUAL        shift and go to state 77


state 34

    (43) varDecl -> typeSpec varAssign . afterVarAssign
    (49) afterVarAssign -> .

    SEMI            reduce using rule 49 (afterVarAssign -> .)

    afterVarAssign                 shift and go to state 78

state 35

    (168) varAssign -> LPAREN . varAssign RPAREN
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr

    ID              shift and go to state 80
    LPAREN          shift and go to state 35

    varAssign                      shift and go to state 79

state 36

    (45) varDecl -> TYPEDEF typeSpec . ID

    ID              shift and go to state 81


state 37

    (46) varDecl -> TYPEDEF combineTypeSpec . ID

    ID              shift and go to state 82


state 38

    (56) typeSpec -> CONST . typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 42

state 39

    (60) typeSpec -> combineType .
    (61) combineTypeSpec -> combineType . LBRACE varDeclList RBRACE

    ID              reduce using rule 60 (typeSpec -> combineType .)
    LBRACE          shift and go to state 45


state 40

    (47) varDecl -> EXTERN typeSpecPostfix . ID

    ID              shift and go to state 83


state 41

    (48) varDecl -> CONST EXTERN . typeSpecPostfix ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 84

state 42

    (56) typeSpec -> CONST typeSpecPostfix .

    ID              reduce using rule 56 (typeSpec -> CONST typeSpecPostfix .)
    LPAREN          reduce using rule 56 (typeSpec -> CONST typeSpecPostfix .)
    RPAREN          reduce using rule 56 (typeSpec -> CONST typeSpecPostfix .)


state 43

    (10) enumDeclaration -> ENUM ID . LBRACE enumArgs RBRACE SEMI
    (12) enumDeclaration -> ENUM ID . ID SEMI

    LBRACE          shift and go to state 86
    ID              shift and go to state 85


state 44

    (11) enumDeclaration -> ENUM LBRACE . enumArgs RBRACE SEMI
    (13) enumArgs -> . enumIDList
    (14) enumArgs -> . enumArgs COMMA enumIDList
    (15) enumIDList -> . ID
    (16) enumIDList -> . ID EQUALS NUMCONST

    ID              shift and go to state 89

    enumArgs                       shift and go to state 87
    enumIDList                     shift and go to state 88

state 45

    (61) combineTypeSpec -> combineType LBRACE . varDeclList RBRACE
    (39) varDeclList -> . varDeclList varDecl SEMI
    (40) varDeclList -> . varDecl SEMI
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    combineType                    shift and go to state 15
    varDeclList                    shift and go to state 90
    varDecl                        shift and go to state 91
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11

state 46

    (52) typeSpec -> AUTO typeSpecPostfix .

    ID              reduce using rule 52 (typeSpec -> AUTO typeSpecPostfix .)
    LPAREN          reduce using rule 52 (typeSpec -> AUTO typeSpecPostfix .)
    RPAREN          reduce using rule 52 (typeSpec -> AUTO typeSpecPostfix .)


state 47

    (53) typeSpec -> VOLATILE typeSpecPostfix .

    ID              reduce using rule 53 (typeSpec -> VOLATILE typeSpecPostfix .)
    LPAREN          reduce using rule 53 (typeSpec -> VOLATILE typeSpecPostfix .)
    RPAREN          reduce using rule 53 (typeSpec -> VOLATILE typeSpecPostfix .)


state 48

    (54) typeSpec -> VOLATILE STATIC . typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 93

state 49

    (55) typeSpec -> STATIC typeSpecPostfix .

    ID              reduce using rule 55 (typeSpec -> STATIC typeSpecPostfix .)
    LPAREN          reduce using rule 55 (typeSpec -> STATIC typeSpecPostfix .)
    RPAREN          reduce using rule 55 (typeSpec -> STATIC typeSpecPostfix .)


state 50

    (57) typeSpec -> REGISTER typeSpecPostfix .

    ID              reduce using rule 57 (typeSpec -> REGISTER typeSpecPostfix .)
    LPAREN          reduce using rule 57 (typeSpec -> REGISTER typeSpecPostfix .)
    RPAREN          reduce using rule 57 (typeSpec -> REGISTER typeSpecPostfix .)


state 51

    (58) typeSpec -> REGISTER STATIC . typeSpecPostfix
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    typeSpecPostfix                shift and go to state 94

state 52

    (62) combineType -> STRUCT ID .

    LBRACE          reduce using rule 62 (combineType -> STRUCT ID .)
    ID              reduce using rule 62 (combineType -> STRUCT ID .)
    LPAREN          reduce using rule 62 (combineType -> STRUCT ID .)
    RPAREN          reduce using rule 62 (combineType -> STRUCT ID .)


state 53

    (63) combineType -> UNION ID .

    LBRACE          reduce using rule 63 (combineType -> UNION ID .)
    ID              reduce using rule 63 (combineType -> UNION ID .)
    LPAREN          reduce using rule 63 (combineType -> UNION ID .)
    RPAREN          reduce using rule 63 (combineType -> UNION ID .)


state 54

    (72) typeSpecPostfix -> SHORT INT .

    ID              reduce using rule 72 (typeSpecPostfix -> SHORT INT .)
    LPAREN          reduce using rule 72 (typeSpecPostfix -> SHORT INT .)
    RPAREN          reduce using rule 72 (typeSpecPostfix -> SHORT INT .)


state 55

    (74) typeSpecPostfix -> LONG LONG . INT
    (77) typeSpecPostfix -> LONG LONG .

    INT             shift and go to state 95
    ID              reduce using rule 77 (typeSpecPostfix -> LONG LONG .)
    LPAREN          reduce using rule 77 (typeSpecPostfix -> LONG LONG .)
    RPAREN          reduce using rule 77 (typeSpecPostfix -> LONG LONG .)


state 56

    (73) typeSpecPostfix -> LONG INT .

    ID              reduce using rule 73 (typeSpecPostfix -> LONG INT .)
    LPAREN          reduce using rule 73 (typeSpecPostfix -> LONG INT .)
    RPAREN          reduce using rule 73 (typeSpecPostfix -> LONG INT .)


state 57

    (80) typeSpecPostfix -> LONG DOUBLE .

    ID              reduce using rule 80 (typeSpecPostfix -> LONG DOUBLE .)
    LPAREN          reduce using rule 80 (typeSpecPostfix -> LONG DOUBLE .)
    RPAREN          reduce using rule 80 (typeSpecPostfix -> LONG DOUBLE .)


state 58

    (70) typeSpecPostfix -> UNSIGNED INT .

    ID              reduce using rule 70 (typeSpecPostfix -> UNSIGNED INT .)
    LPAREN          reduce using rule 70 (typeSpecPostfix -> UNSIGNED INT .)
    RPAREN          reduce using rule 70 (typeSpecPostfix -> UNSIGNED INT .)


state 59

    (75) typeSpecPostfix -> UNSIGNED CHAR .

    ID              reduce using rule 75 (typeSpecPostfix -> UNSIGNED CHAR .)
    LPAREN          reduce using rule 75 (typeSpecPostfix -> UNSIGNED CHAR .)
    RPAREN          reduce using rule 75 (typeSpecPostfix -> UNSIGNED CHAR .)


state 60

    (79) typeSpecPostfix -> UNSIGNED LONG .

    ID              reduce using rule 79 (typeSpecPostfix -> UNSIGNED LONG .)
    LPAREN          reduce using rule 79 (typeSpecPostfix -> UNSIGNED LONG .)
    RPAREN          reduce using rule 79 (typeSpecPostfix -> UNSIGNED LONG .)


state 61

    (82) typeSpecPostfix -> UNSIGNED SHORT .

    ID              reduce using rule 82 (typeSpecPostfix -> UNSIGNED SHORT .)
    LPAREN          reduce using rule 82 (typeSpecPostfix -> UNSIGNED SHORT .)
    RPAREN          reduce using rule 82 (typeSpecPostfix -> UNSIGNED SHORT .)


state 62

    (71) typeSpecPostfix -> SIGNED INT .

    ID              reduce using rule 71 (typeSpecPostfix -> SIGNED INT .)
    LPAREN          reduce using rule 71 (typeSpecPostfix -> SIGNED INT .)
    RPAREN          reduce using rule 71 (typeSpecPostfix -> SIGNED INT .)


state 63

    (76) typeSpecPostfix -> SIGNED CHAR .

    ID              reduce using rule 76 (typeSpecPostfix -> SIGNED CHAR .)
    LPAREN          reduce using rule 76 (typeSpecPostfix -> SIGNED CHAR .)
    RPAREN          reduce using rule 76 (typeSpecPostfix -> SIGNED CHAR .)


state 64

    (78) typeSpecPostfix -> SIGNED LONG .

    ID              reduce using rule 78 (typeSpecPostfix -> SIGNED LONG .)
    LPAREN          reduce using rule 78 (typeSpecPostfix -> SIGNED LONG .)
    RPAREN          reduce using rule 78 (typeSpecPostfix -> SIGNED LONG .)


state 65

    (81) typeSpecPostfix -> SIGNED SHORT .

    ID              reduce using rule 81 (typeSpecPostfix -> SIGNED SHORT .)
    LPAREN          reduce using rule 81 (typeSpecPostfix -> SIGNED SHORT .)
    RPAREN          reduce using rule 81 (typeSpecPostfix -> SIGNED SHORT .)


state 66

    (17) funcList -> typeSpec ID LPAREN . args RPAREN scope
    (18) args -> . typeSpecList
    (19) args -> . operandList
    (20) args -> . empty
    (50) typeSpecList -> . typeSpecList COMMA typeSpec ID
    (51) typeSpecList -> . typeSpec ID
    (21) operandList -> . operandList COMMA operand
    (22) operandList -> . operand
    (1) empty -> .
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (127) funcCall -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 1 (empty -> .)
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21

    typeSpec                       shift and go to state 96
    args                           shift and go to state 99
    typeSpecList                   shift and go to state 100
    operandList                    shift and go to state 101
    empty                          shift and go to state 102
    operand                        shift and go to state 103
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104
    funcCall                       shift and go to state 106

state 67

    (166) varAssign -> ID EQUALS . expr
    (167) varAssign -> ID EQUALS . STRING
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    STRING          shift and go to state 109
    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 108
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 68

    (169) varAssign -> ID TIMESEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 125
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 69

    (170) varAssign -> ID DIVEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 126
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 70

    (171) varAssign -> ID MODEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 127
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 71

    (172) varAssign -> ID PLUSEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 128
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 72

    (173) varAssign -> ID MINUSEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 129
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 73

    (174) varAssign -> ID LSHIFTEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 130
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 74

    (175) varAssign -> ID RSHIFTEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 131
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 75

    (176) varAssign -> ID ANDEQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 132
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 76

    (177) varAssign -> ID OREQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 133
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 77

    (178) varAssign -> ID XOREQUAL . expr
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 134
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 78

    (43) varDecl -> typeSpec varAssign afterVarAssign .

    SEMI            reduce using rule 43 (varDecl -> typeSpec varAssign afterVarAssign .)


state 79

    (168) varAssign -> LPAREN varAssign . RPAREN

    RPAREN          shift and go to state 135


state 80

    (166) varAssign -> ID . EQUALS expr
    (167) varAssign -> ID . EQUALS STRING
    (169) varAssign -> ID . TIMESEQUAL expr
    (170) varAssign -> ID . DIVEQUAL expr
    (171) varAssign -> ID . MODEQUAL expr
    (172) varAssign -> ID . PLUSEQUAL expr
    (173) varAssign -> ID . MINUSEQUAL expr
    (174) varAssign -> ID . LSHIFTEQUAL expr
    (175) varAssign -> ID . RSHIFTEQUAL expr
    (176) varAssign -> ID . ANDEQUAL expr
    (177) varAssign -> ID . OREQUAL expr
    (178) varAssign -> ID . XOREQUAL expr

    EQUALS          shift and go to state 67
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 69
    MODEQUAL        shift and go to state 70
    PLUSEQUAL       shift and go to state 71
    MINUSEQUAL      shift and go to state 72
    LSHIFTEQUAL     shift and go to state 73
    RSHIFTEQUAL     shift and go to state 74
    ANDEQUAL        shift and go to state 75
    OREQUAL         shift and go to state 76
    XOREQUAL        shift and go to state 77


state 81

    (45) varDecl -> TYPEDEF typeSpec ID .

    SEMI            reduce using rule 45 (varDecl -> TYPEDEF typeSpec ID .)


state 82

    (46) varDecl -> TYPEDEF combineTypeSpec ID .

    SEMI            reduce using rule 46 (varDecl -> TYPEDEF combineTypeSpec ID .)


state 83

    (47) varDecl -> EXTERN typeSpecPostfix ID .

    SEMI            reduce using rule 47 (varDecl -> EXTERN typeSpecPostfix ID .)


state 84

    (48) varDecl -> CONST EXTERN typeSpecPostfix . ID

    ID              shift and go to state 136


state 85

    (12) enumDeclaration -> ENUM ID ID . SEMI

    SEMI            shift and go to state 137


state 86

    (10) enumDeclaration -> ENUM ID LBRACE . enumArgs RBRACE SEMI
    (13) enumArgs -> . enumIDList
    (14) enumArgs -> . enumArgs COMMA enumIDList
    (15) enumIDList -> . ID
    (16) enumIDList -> . ID EQUALS NUMCONST

    ID              shift and go to state 89

    enumArgs                       shift and go to state 138
    enumIDList                     shift and go to state 88

state 87

    (11) enumDeclaration -> ENUM LBRACE enumArgs . RBRACE SEMI
    (14) enumArgs -> enumArgs . COMMA enumIDList

    RBRACE          shift and go to state 139
    COMMA           shift and go to state 140


state 88

    (13) enumArgs -> enumIDList .

    RBRACE          reduce using rule 13 (enumArgs -> enumIDList .)
    COMMA           reduce using rule 13 (enumArgs -> enumIDList .)


state 89

    (15) enumIDList -> ID .
    (16) enumIDList -> ID . EQUALS NUMCONST

    RBRACE          reduce using rule 15 (enumIDList -> ID .)
    COMMA           reduce using rule 15 (enumIDList -> ID .)
    EQUALS          shift and go to state 141


state 90

    (61) combineTypeSpec -> combineType LBRACE varDeclList . RBRACE
    (39) varDeclList -> varDeclList . varDecl SEMI
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT

    RBRACE          shift and go to state 142
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29

    combineType                    shift and go to state 15
    varDecl                        shift and go to state 143
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11

state 91

    (40) varDeclList -> varDecl . SEMI

    SEMI            shift and go to state 144


state 92

    (42) varDecl -> typeSpec . ID
    (43) varDecl -> typeSpec . varAssign afterVarAssign
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr

    ID              shift and go to state 145
    LPAREN          shift and go to state 35

    varAssign                      shift and go to state 34

state 93

    (54) typeSpec -> VOLATILE STATIC typeSpecPostfix .

    ID              reduce using rule 54 (typeSpec -> VOLATILE STATIC typeSpecPostfix .)
    LPAREN          reduce using rule 54 (typeSpec -> VOLATILE STATIC typeSpecPostfix .)
    RPAREN          reduce using rule 54 (typeSpec -> VOLATILE STATIC typeSpecPostfix .)


state 94

    (58) typeSpec -> REGISTER STATIC typeSpecPostfix .

    ID              reduce using rule 58 (typeSpec -> REGISTER STATIC typeSpecPostfix .)
    LPAREN          reduce using rule 58 (typeSpec -> REGISTER STATIC typeSpecPostfix .)
    RPAREN          reduce using rule 58 (typeSpec -> REGISTER STATIC typeSpecPostfix .)


state 95

    (74) typeSpecPostfix -> LONG LONG INT .

    ID              reduce using rule 74 (typeSpecPostfix -> LONG LONG INT .)
    LPAREN          reduce using rule 74 (typeSpecPostfix -> LONG LONG INT .)
    RPAREN          reduce using rule 74 (typeSpecPostfix -> LONG LONG INT .)


state 96

    (51) typeSpecList -> typeSpec . ID

    ID              shift and go to state 146


state 97

    (23) operand -> ID . afterID
    (127) funcCall -> ID . LPAREN args RPAREN
    (28) afterID -> .

    LPAREN          shift and go to state 148
    COMMA           reduce using rule 28 (afterID -> .)
    RPAREN          reduce using rule 28 (afterID -> .)
    PERIOD          reduce using rule 28 (afterID -> .)
    LBRACKET        reduce using rule 28 (afterID -> .)
    INCREMENT       reduce using rule 28 (afterID -> .)
    DECREMENT       reduce using rule 28 (afterID -> .)
    TIMES           reduce using rule 28 (afterID -> .)
    DIVIDE          reduce using rule 28 (afterID -> .)
    MODULO          reduce using rule 28 (afterID -> .)
    PLUS            reduce using rule 28 (afterID -> .)
    MINUS           reduce using rule 28 (afterID -> .)
    LSHIFT          reduce using rule 28 (afterID -> .)
    RSHIFT          reduce using rule 28 (afterID -> .)
    EQ              reduce using rule 28 (afterID -> .)
    NE              reduce using rule 28 (afterID -> .)
    LE              reduce using rule 28 (afterID -> .)
    GE              reduce using rule 28 (afterID -> .)
    LANGLE          reduce using rule 28 (afterID -> .)
    RANGLE          reduce using rule 28 (afterID -> .)
    LOR             reduce using rule 28 (afterID -> .)
    LAND            reduce using rule 28 (afterID -> .)
    OR              reduce using rule 28 (afterID -> .)
    XOR             reduce using rule 28 (afterID -> .)
    AND             reduce using rule 28 (afterID -> .)
    SEMI            reduce using rule 28 (afterID -> .)
    RBRACKET        reduce using rule 28 (afterID -> .)
    COLON           reduce using rule 28 (afterID -> .)

    afterID                        shift and go to state 147

state 98

    (26) operand -> LPAREN . expr RPAREN
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 149
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 99

    (17) funcList -> typeSpec ID LPAREN args . RPAREN scope

    RPAREN          shift and go to state 150


state 100

    (18) args -> typeSpecList .
    (50) typeSpecList -> typeSpecList . COMMA typeSpec ID

    RPAREN          reduce using rule 18 (args -> typeSpecList .)
    COMMA           shift and go to state 151


state 101

    (19) args -> operandList .
    (21) operandList -> operandList . COMMA operand

    RPAREN          reduce using rule 19 (args -> operandList .)
    COMMA           shift and go to state 152


state 102

    (20) args -> empty .

    RPAREN          reduce using rule 20 (args -> empty .)


state 103

    (22) operandList -> operand .

    COMMA           reduce using rule 22 (operandList -> operand .)
    RPAREN          reduce using rule 22 (operandList -> operand .)


state 104

    (60) typeSpec -> combineType .

    ID              reduce using rule 60 (typeSpec -> combineType .)
    RPAREN          reduce using rule 60 (typeSpec -> combineType .)
    LPAREN          reduce using rule 60 (typeSpec -> combineType .)


state 105

    (24) operand -> NUMCONST .

    COMMA           reduce using rule 24 (operand -> NUMCONST .)
    RPAREN          reduce using rule 24 (operand -> NUMCONST .)
    PERIOD          reduce using rule 24 (operand -> NUMCONST .)
    LBRACKET        reduce using rule 24 (operand -> NUMCONST .)
    INCREMENT       reduce using rule 24 (operand -> NUMCONST .)
    DECREMENT       reduce using rule 24 (operand -> NUMCONST .)
    TIMES           reduce using rule 24 (operand -> NUMCONST .)
    DIVIDE          reduce using rule 24 (operand -> NUMCONST .)
    MODULO          reduce using rule 24 (operand -> NUMCONST .)
    PLUS            reduce using rule 24 (operand -> NUMCONST .)
    MINUS           reduce using rule 24 (operand -> NUMCONST .)
    LSHIFT          reduce using rule 24 (operand -> NUMCONST .)
    RSHIFT          reduce using rule 24 (operand -> NUMCONST .)
    EQ              reduce using rule 24 (operand -> NUMCONST .)
    NE              reduce using rule 24 (operand -> NUMCONST .)
    LE              reduce using rule 24 (operand -> NUMCONST .)
    GE              reduce using rule 24 (operand -> NUMCONST .)
    LANGLE          reduce using rule 24 (operand -> NUMCONST .)
    RANGLE          reduce using rule 24 (operand -> NUMCONST .)
    LOR             reduce using rule 24 (operand -> NUMCONST .)
    LAND            reduce using rule 24 (operand -> NUMCONST .)
    OR              reduce using rule 24 (operand -> NUMCONST .)
    XOR             reduce using rule 24 (operand -> NUMCONST .)
    AND             reduce using rule 24 (operand -> NUMCONST .)
    SEMI            reduce using rule 24 (operand -> NUMCONST .)
    RBRACKET        reduce using rule 24 (operand -> NUMCONST .)
    COLON           reduce using rule 24 (operand -> NUMCONST .)


state 106

    (25) operand -> funcCall .

    COMMA           reduce using rule 25 (operand -> funcCall .)
    RPAREN          reduce using rule 25 (operand -> funcCall .)
    PERIOD          reduce using rule 25 (operand -> funcCall .)
    LBRACKET        reduce using rule 25 (operand -> funcCall .)
    INCREMENT       reduce using rule 25 (operand -> funcCall .)
    DECREMENT       reduce using rule 25 (operand -> funcCall .)
    TIMES           reduce using rule 25 (operand -> funcCall .)
    DIVIDE          reduce using rule 25 (operand -> funcCall .)
    MODULO          reduce using rule 25 (operand -> funcCall .)
    PLUS            reduce using rule 25 (operand -> funcCall .)
    MINUS           reduce using rule 25 (operand -> funcCall .)
    LSHIFT          reduce using rule 25 (operand -> funcCall .)
    RSHIFT          reduce using rule 25 (operand -> funcCall .)
    EQ              reduce using rule 25 (operand -> funcCall .)
    NE              reduce using rule 25 (operand -> funcCall .)
    LE              reduce using rule 25 (operand -> funcCall .)
    GE              reduce using rule 25 (operand -> funcCall .)
    LANGLE          reduce using rule 25 (operand -> funcCall .)
    RANGLE          reduce using rule 25 (operand -> funcCall .)
    LOR             reduce using rule 25 (operand -> funcCall .)
    LAND            reduce using rule 25 (operand -> funcCall .)
    OR              reduce using rule 25 (operand -> funcCall .)
    XOR             reduce using rule 25 (operand -> funcCall .)
    AND             reduce using rule 25 (operand -> funcCall .)
    SEMI            reduce using rule 25 (operand -> funcCall .)
    RBRACKET        reduce using rule 25 (operand -> funcCall .)
    COLON           reduce using rule 25 (operand -> funcCall .)


state 107

    (27) operand -> MINUS . NUMCONST

    NUMCONST        shift and go to state 153


state 108

    (166) varAssign -> ID EQUALS expr .

    SEMI            reduce using rule 166 (varAssign -> ID EQUALS expr .)
    RPAREN          reduce using rule 166 (varAssign -> ID EQUALS expr .)


state 109

    (167) varAssign -> ID EQUALS STRING .

    SEMI            reduce using rule 167 (varAssign -> ID EQUALS STRING .)
    RPAREN          reduce using rule 167 (varAssign -> ID EQUALS STRING .)


state 110

    (128) expr -> logicalExpr .
    (130) logicalExpr -> logicalExpr . LOR compOps
    (131) logicalExpr -> logicalExpr . LAND compOps
    (132) logicalExpr -> logicalExpr . OR compOps
    (133) logicalExpr -> logicalExpr . XOR compOps
    (134) logicalExpr -> logicalExpr . AND compOps

    SEMI            reduce using rule 128 (expr -> logicalExpr .)
    RPAREN          reduce using rule 128 (expr -> logicalExpr .)
    RBRACKET        reduce using rule 128 (expr -> logicalExpr .)
    LOR             shift and go to state 154
    LAND            shift and go to state 155
    OR              shift and go to state 156
    XOR             shift and go to state 157
    AND             shift and go to state 158


state 111

    (129) logicalExpr -> compOps .
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    LOR             reduce using rule 129 (logicalExpr -> compOps .)
    LAND            reduce using rule 129 (logicalExpr -> compOps .)
    OR              reduce using rule 129 (logicalExpr -> compOps .)
    XOR             reduce using rule 129 (logicalExpr -> compOps .)
    AND             reduce using rule 129 (logicalExpr -> compOps .)
    SEMI            reduce using rule 129 (logicalExpr -> compOps .)
    RPAREN          reduce using rule 129 (logicalExpr -> compOps .)
    RBRACKET        reduce using rule 129 (logicalExpr -> compOps .)
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 112

    (135) compOps -> shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 135 (compOps -> shiftExpr .)
    NE              reduce using rule 135 (compOps -> shiftExpr .)
    LE              reduce using rule 135 (compOps -> shiftExpr .)
    GE              reduce using rule 135 (compOps -> shiftExpr .)
    LANGLE          reduce using rule 135 (compOps -> shiftExpr .)
    RANGLE          reduce using rule 135 (compOps -> shiftExpr .)
    LOR             reduce using rule 135 (compOps -> shiftExpr .)
    LAND            reduce using rule 135 (compOps -> shiftExpr .)
    OR              reduce using rule 135 (compOps -> shiftExpr .)
    XOR             reduce using rule 135 (compOps -> shiftExpr .)
    AND             reduce using rule 135 (compOps -> shiftExpr .)
    SEMI            reduce using rule 135 (compOps -> shiftExpr .)
    RPAREN          reduce using rule 135 (compOps -> shiftExpr .)
    RBRACKET        reduce using rule 135 (compOps -> shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 113

    (142) shiftExpr -> additiveExpr .
    (145) additiveExpr -> additiveExpr . PLUS multiplicativeExpr
    (146) additiveExpr -> additiveExpr . MINUS multiplicativeExpr

    LSHIFT          reduce using rule 142 (shiftExpr -> additiveExpr .)
    RSHIFT          reduce using rule 142 (shiftExpr -> additiveExpr .)
    EQ              reduce using rule 142 (shiftExpr -> additiveExpr .)
    NE              reduce using rule 142 (shiftExpr -> additiveExpr .)
    LE              reduce using rule 142 (shiftExpr -> additiveExpr .)
    GE              reduce using rule 142 (shiftExpr -> additiveExpr .)
    LANGLE          reduce using rule 142 (shiftExpr -> additiveExpr .)
    RANGLE          reduce using rule 142 (shiftExpr -> additiveExpr .)
    LOR             reduce using rule 142 (shiftExpr -> additiveExpr .)
    LAND            reduce using rule 142 (shiftExpr -> additiveExpr .)
    OR              reduce using rule 142 (shiftExpr -> additiveExpr .)
    XOR             reduce using rule 142 (shiftExpr -> additiveExpr .)
    AND             reduce using rule 142 (shiftExpr -> additiveExpr .)
    SEMI            reduce using rule 142 (shiftExpr -> additiveExpr .)
    RPAREN          reduce using rule 142 (shiftExpr -> additiveExpr .)
    RBRACKET        reduce using rule 142 (shiftExpr -> additiveExpr .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 114

    (147) additiveExpr -> multiplicativeExpr .
    (148) multiplicativeExpr -> multiplicativeExpr . TIMES castExpr
    (149) multiplicativeExpr -> multiplicativeExpr . DIVIDE castExpr
    (150) multiplicativeExpr -> multiplicativeExpr . MODULO castExpr

    PLUS            reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    MINUS           reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    LSHIFT          reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    RSHIFT          reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    EQ              reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    NE              reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    LE              reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    GE              reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    LANGLE          reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    RANGLE          reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    LOR             reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    LAND            reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    OR              reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    XOR             reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    AND             reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    SEMI            reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    RPAREN          reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    RBRACKET        reduce using rule 147 (additiveExpr -> multiplicativeExpr .)
    TIMES           shift and go to state 169
    DIVIDE          shift and go to state 170
    MODULO          shift and go to state 171


state 115

    (151) multiplicativeExpr -> castExpr .

    TIMES           reduce using rule 151 (multiplicativeExpr -> castExpr .)
    DIVIDE          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    MODULO          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    PLUS            reduce using rule 151 (multiplicativeExpr -> castExpr .)
    MINUS           reduce using rule 151 (multiplicativeExpr -> castExpr .)
    LSHIFT          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    RSHIFT          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    EQ              reduce using rule 151 (multiplicativeExpr -> castExpr .)
    NE              reduce using rule 151 (multiplicativeExpr -> castExpr .)
    LE              reduce using rule 151 (multiplicativeExpr -> castExpr .)
    GE              reduce using rule 151 (multiplicativeExpr -> castExpr .)
    LANGLE          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    RANGLE          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    LOR             reduce using rule 151 (multiplicativeExpr -> castExpr .)
    LAND            reduce using rule 151 (multiplicativeExpr -> castExpr .)
    OR              reduce using rule 151 (multiplicativeExpr -> castExpr .)
    XOR             reduce using rule 151 (multiplicativeExpr -> castExpr .)
    AND             reduce using rule 151 (multiplicativeExpr -> castExpr .)
    SEMI            reduce using rule 151 (multiplicativeExpr -> castExpr .)
    RPAREN          reduce using rule 151 (multiplicativeExpr -> castExpr .)
    RBRACKET        reduce using rule 151 (multiplicativeExpr -> castExpr .)


state 116

    (152) castExpr -> unaryExpr .
    (159) unaryExpr -> unaryExpr . INCREMENT
    (160) unaryExpr -> unaryExpr . DECREMENT

    TIMES           reduce using rule 152 (castExpr -> unaryExpr .)
    DIVIDE          reduce using rule 152 (castExpr -> unaryExpr .)
    MODULO          reduce using rule 152 (castExpr -> unaryExpr .)
    PLUS            reduce using rule 152 (castExpr -> unaryExpr .)
    MINUS           reduce using rule 152 (castExpr -> unaryExpr .)
    LSHIFT          reduce using rule 152 (castExpr -> unaryExpr .)
    RSHIFT          reduce using rule 152 (castExpr -> unaryExpr .)
    EQ              reduce using rule 152 (castExpr -> unaryExpr .)
    NE              reduce using rule 152 (castExpr -> unaryExpr .)
    LE              reduce using rule 152 (castExpr -> unaryExpr .)
    GE              reduce using rule 152 (castExpr -> unaryExpr .)
    LANGLE          reduce using rule 152 (castExpr -> unaryExpr .)
    RANGLE          reduce using rule 152 (castExpr -> unaryExpr .)
    LOR             reduce using rule 152 (castExpr -> unaryExpr .)
    LAND            reduce using rule 152 (castExpr -> unaryExpr .)
    OR              reduce using rule 152 (castExpr -> unaryExpr .)
    XOR             reduce using rule 152 (castExpr -> unaryExpr .)
    AND             reduce using rule 152 (castExpr -> unaryExpr .)
    SEMI            reduce using rule 152 (castExpr -> unaryExpr .)
    RPAREN          reduce using rule 152 (castExpr -> unaryExpr .)
    RBRACKET        reduce using rule 152 (castExpr -> unaryExpr .)
    INCREMENT       shift and go to state 172
    DECREMENT       shift and go to state 173


state 117

    (153) castExpr -> LPAREN . typeSpec RPAREN castExpr
    (26) operand -> LPAREN . expr RPAREN
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (128) expr -> . logicalExpr
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    typeSpec                       shift and go to state 174
    castExpr                       shift and go to state 115
    expr                           shift and go to state 149
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 118

    (154) unaryExpr -> postfixExpr .
    (162) postfixExpr -> postfixExpr . PERIOD ID
    (163) postfixExpr -> postfixExpr . LBRACKET expr RBRACKET

    INCREMENT       reduce using rule 154 (unaryExpr -> postfixExpr .)
    DECREMENT       reduce using rule 154 (unaryExpr -> postfixExpr .)
    TIMES           reduce using rule 154 (unaryExpr -> postfixExpr .)
    DIVIDE          reduce using rule 154 (unaryExpr -> postfixExpr .)
    MODULO          reduce using rule 154 (unaryExpr -> postfixExpr .)
    PLUS            reduce using rule 154 (unaryExpr -> postfixExpr .)
    MINUS           reduce using rule 154 (unaryExpr -> postfixExpr .)
    LSHIFT          reduce using rule 154 (unaryExpr -> postfixExpr .)
    RSHIFT          reduce using rule 154 (unaryExpr -> postfixExpr .)
    EQ              reduce using rule 154 (unaryExpr -> postfixExpr .)
    NE              reduce using rule 154 (unaryExpr -> postfixExpr .)
    LE              reduce using rule 154 (unaryExpr -> postfixExpr .)
    GE              reduce using rule 154 (unaryExpr -> postfixExpr .)
    LANGLE          reduce using rule 154 (unaryExpr -> postfixExpr .)
    RANGLE          reduce using rule 154 (unaryExpr -> postfixExpr .)
    LOR             reduce using rule 154 (unaryExpr -> postfixExpr .)
    LAND            reduce using rule 154 (unaryExpr -> postfixExpr .)
    OR              reduce using rule 154 (unaryExpr -> postfixExpr .)
    XOR             reduce using rule 154 (unaryExpr -> postfixExpr .)
    AND             reduce using rule 154 (unaryExpr -> postfixExpr .)
    SEMI            reduce using rule 154 (unaryExpr -> postfixExpr .)
    RPAREN          reduce using rule 154 (unaryExpr -> postfixExpr .)
    RBRACKET        reduce using rule 154 (unaryExpr -> postfixExpr .)
    PERIOD          shift and go to state 175
    LBRACKET        shift and go to state 176


state 119

    (155) unaryExpr -> LNOT . unaryExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    unaryExpr                      shift and go to state 177
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 120

    (156) unaryExpr -> NOT . unaryExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    unaryExpr                      shift and go to state 178
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 121

    (157) unaryExpr -> SIZEOF . LPAREN unaryExpr RPAREN
    (158) unaryExpr -> SIZEOF . LPAREN typeSpec RPAREN

    LPAREN          shift and go to state 179


state 122

    (164) postfixExpr -> INCREMENT . postfixExpr
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    postfixExpr                    shift and go to state 180
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 123

    (165) postfixExpr -> DECREMENT . postfixExpr
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    postfixExpr                    shift and go to state 181
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 124

    (161) postfixExpr -> operand .

    PERIOD          reduce using rule 161 (postfixExpr -> operand .)
    LBRACKET        reduce using rule 161 (postfixExpr -> operand .)
    INCREMENT       reduce using rule 161 (postfixExpr -> operand .)
    DECREMENT       reduce using rule 161 (postfixExpr -> operand .)
    TIMES           reduce using rule 161 (postfixExpr -> operand .)
    DIVIDE          reduce using rule 161 (postfixExpr -> operand .)
    MODULO          reduce using rule 161 (postfixExpr -> operand .)
    PLUS            reduce using rule 161 (postfixExpr -> operand .)
    MINUS           reduce using rule 161 (postfixExpr -> operand .)
    LSHIFT          reduce using rule 161 (postfixExpr -> operand .)
    RSHIFT          reduce using rule 161 (postfixExpr -> operand .)
    EQ              reduce using rule 161 (postfixExpr -> operand .)
    NE              reduce using rule 161 (postfixExpr -> operand .)
    LE              reduce using rule 161 (postfixExpr -> operand .)
    GE              reduce using rule 161 (postfixExpr -> operand .)
    LANGLE          reduce using rule 161 (postfixExpr -> operand .)
    RANGLE          reduce using rule 161 (postfixExpr -> operand .)
    LOR             reduce using rule 161 (postfixExpr -> operand .)
    LAND            reduce using rule 161 (postfixExpr -> operand .)
    OR              reduce using rule 161 (postfixExpr -> operand .)
    XOR             reduce using rule 161 (postfixExpr -> operand .)
    AND             reduce using rule 161 (postfixExpr -> operand .)
    SEMI            reduce using rule 161 (postfixExpr -> operand .)
    RPAREN          reduce using rule 161 (postfixExpr -> operand .)
    RBRACKET        reduce using rule 161 (postfixExpr -> operand .)


state 125

    (169) varAssign -> ID TIMESEQUAL expr .

    SEMI            reduce using rule 169 (varAssign -> ID TIMESEQUAL expr .)
    RPAREN          reduce using rule 169 (varAssign -> ID TIMESEQUAL expr .)


state 126

    (170) varAssign -> ID DIVEQUAL expr .

    SEMI            reduce using rule 170 (varAssign -> ID DIVEQUAL expr .)
    RPAREN          reduce using rule 170 (varAssign -> ID DIVEQUAL expr .)


state 127

    (171) varAssign -> ID MODEQUAL expr .

    SEMI            reduce using rule 171 (varAssign -> ID MODEQUAL expr .)
    RPAREN          reduce using rule 171 (varAssign -> ID MODEQUAL expr .)


state 128

    (172) varAssign -> ID PLUSEQUAL expr .

    SEMI            reduce using rule 172 (varAssign -> ID PLUSEQUAL expr .)
    RPAREN          reduce using rule 172 (varAssign -> ID PLUSEQUAL expr .)


state 129

    (173) varAssign -> ID MINUSEQUAL expr .

    SEMI            reduce using rule 173 (varAssign -> ID MINUSEQUAL expr .)
    RPAREN          reduce using rule 173 (varAssign -> ID MINUSEQUAL expr .)


state 130

    (174) varAssign -> ID LSHIFTEQUAL expr .

    SEMI            reduce using rule 174 (varAssign -> ID LSHIFTEQUAL expr .)
    RPAREN          reduce using rule 174 (varAssign -> ID LSHIFTEQUAL expr .)


state 131

    (175) varAssign -> ID RSHIFTEQUAL expr .

    SEMI            reduce using rule 175 (varAssign -> ID RSHIFTEQUAL expr .)
    RPAREN          reduce using rule 175 (varAssign -> ID RSHIFTEQUAL expr .)


state 132

    (176) varAssign -> ID ANDEQUAL expr .

    SEMI            reduce using rule 176 (varAssign -> ID ANDEQUAL expr .)
    RPAREN          reduce using rule 176 (varAssign -> ID ANDEQUAL expr .)


state 133

    (177) varAssign -> ID OREQUAL expr .

    SEMI            reduce using rule 177 (varAssign -> ID OREQUAL expr .)
    RPAREN          reduce using rule 177 (varAssign -> ID OREQUAL expr .)


state 134

    (178) varAssign -> ID XOREQUAL expr .

    SEMI            reduce using rule 178 (varAssign -> ID XOREQUAL expr .)
    RPAREN          reduce using rule 178 (varAssign -> ID XOREQUAL expr .)


state 135

    (168) varAssign -> LPAREN varAssign RPAREN .

    SEMI            reduce using rule 168 (varAssign -> LPAREN varAssign RPAREN .)
    RPAREN          reduce using rule 168 (varAssign -> LPAREN varAssign RPAREN .)


state 136

    (48) varDecl -> CONST EXTERN typeSpecPostfix ID .

    SEMI            reduce using rule 48 (varDecl -> CONST EXTERN typeSpecPostfix ID .)


state 137

    (12) enumDeclaration -> ENUM ID ID SEMI .

    PREPROC         reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    TYPEDEF         reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    EXTERN          reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    CONST           reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    ENUM            reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    AUTO            reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    VOLATILE        reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    STATIC          reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    REGISTER        reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    STRUCT          reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    UNION           reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    INT             reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    CHAR            reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    SHORT           reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    LONG            reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    FLOAT           reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    DOUBLE          reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    UNSIGNED        reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    SIGNED          reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)
    $end            reduce using rule 12 (enumDeclaration -> ENUM ID ID SEMI .)


state 138

    (10) enumDeclaration -> ENUM ID LBRACE enumArgs . RBRACE SEMI
    (14) enumArgs -> enumArgs . COMMA enumIDList

    RBRACE          shift and go to state 182
    COMMA           shift and go to state 140


state 139

    (11) enumDeclaration -> ENUM LBRACE enumArgs RBRACE . SEMI

    SEMI            shift and go to state 183


state 140

    (14) enumArgs -> enumArgs COMMA . enumIDList
    (15) enumIDList -> . ID
    (16) enumIDList -> . ID EQUALS NUMCONST

    ID              shift and go to state 89

    enumIDList                     shift and go to state 184

state 141

    (16) enumIDList -> ID EQUALS . NUMCONST

    NUMCONST        shift and go to state 185


state 142

    (61) combineTypeSpec -> combineType LBRACE varDeclList RBRACE .

    ID              reduce using rule 61 (combineTypeSpec -> combineType LBRACE varDeclList RBRACE .)
    SEMI            reduce using rule 61 (combineTypeSpec -> combineType LBRACE varDeclList RBRACE .)


state 143

    (39) varDeclList -> varDeclList varDecl . SEMI

    SEMI            shift and go to state 186


state 144

    (40) varDeclList -> varDecl SEMI .

    RBRACE          reduce using rule 40 (varDeclList -> varDecl SEMI .)
    TYPEDEF         reduce using rule 40 (varDeclList -> varDecl SEMI .)
    EXTERN          reduce using rule 40 (varDeclList -> varDecl SEMI .)
    CONST           reduce using rule 40 (varDeclList -> varDecl SEMI .)
    AUTO            reduce using rule 40 (varDeclList -> varDecl SEMI .)
    VOLATILE        reduce using rule 40 (varDeclList -> varDecl SEMI .)
    STATIC          reduce using rule 40 (varDeclList -> varDecl SEMI .)
    REGISTER        reduce using rule 40 (varDeclList -> varDecl SEMI .)
    STRUCT          reduce using rule 40 (varDeclList -> varDecl SEMI .)
    UNION           reduce using rule 40 (varDeclList -> varDecl SEMI .)
    INT             reduce using rule 40 (varDeclList -> varDecl SEMI .)
    CHAR            reduce using rule 40 (varDeclList -> varDecl SEMI .)
    SHORT           reduce using rule 40 (varDeclList -> varDecl SEMI .)
    LONG            reduce using rule 40 (varDeclList -> varDecl SEMI .)
    FLOAT           reduce using rule 40 (varDeclList -> varDecl SEMI .)
    DOUBLE          reduce using rule 40 (varDeclList -> varDecl SEMI .)
    UNSIGNED        reduce using rule 40 (varDeclList -> varDecl SEMI .)
    SIGNED          reduce using rule 40 (varDeclList -> varDecl SEMI .)


state 145

    (42) varDecl -> typeSpec ID .
    (166) varAssign -> ID . EQUALS expr
    (167) varAssign -> ID . EQUALS STRING
    (169) varAssign -> ID . TIMESEQUAL expr
    (170) varAssign -> ID . DIVEQUAL expr
    (171) varAssign -> ID . MODEQUAL expr
    (172) varAssign -> ID . PLUSEQUAL expr
    (173) varAssign -> ID . MINUSEQUAL expr
    (174) varAssign -> ID . LSHIFTEQUAL expr
    (175) varAssign -> ID . RSHIFTEQUAL expr
    (176) varAssign -> ID . ANDEQUAL expr
    (177) varAssign -> ID . OREQUAL expr
    (178) varAssign -> ID . XOREQUAL expr

    SEMI            reduce using rule 42 (varDecl -> typeSpec ID .)
    EQUALS          shift and go to state 67
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 69
    MODEQUAL        shift and go to state 70
    PLUSEQUAL       shift and go to state 71
    MINUSEQUAL      shift and go to state 72
    LSHIFTEQUAL     shift and go to state 73
    RSHIFTEQUAL     shift and go to state 74
    ANDEQUAL        shift and go to state 75
    OREQUAL         shift and go to state 76
    XOREQUAL        shift and go to state 77


state 146

    (51) typeSpecList -> typeSpec ID .

    COMMA           reduce using rule 51 (typeSpecList -> typeSpec ID .)
    RPAREN          reduce using rule 51 (typeSpecList -> typeSpec ID .)


state 147

    (23) operand -> ID afterID .

    COMMA           reduce using rule 23 (operand -> ID afterID .)
    RPAREN          reduce using rule 23 (operand -> ID afterID .)
    PERIOD          reduce using rule 23 (operand -> ID afterID .)
    LBRACKET        reduce using rule 23 (operand -> ID afterID .)
    INCREMENT       reduce using rule 23 (operand -> ID afterID .)
    DECREMENT       reduce using rule 23 (operand -> ID afterID .)
    TIMES           reduce using rule 23 (operand -> ID afterID .)
    DIVIDE          reduce using rule 23 (operand -> ID afterID .)
    MODULO          reduce using rule 23 (operand -> ID afterID .)
    PLUS            reduce using rule 23 (operand -> ID afterID .)
    MINUS           reduce using rule 23 (operand -> ID afterID .)
    LSHIFT          reduce using rule 23 (operand -> ID afterID .)
    RSHIFT          reduce using rule 23 (operand -> ID afterID .)
    EQ              reduce using rule 23 (operand -> ID afterID .)
    NE              reduce using rule 23 (operand -> ID afterID .)
    LE              reduce using rule 23 (operand -> ID afterID .)
    GE              reduce using rule 23 (operand -> ID afterID .)
    LANGLE          reduce using rule 23 (operand -> ID afterID .)
    RANGLE          reduce using rule 23 (operand -> ID afterID .)
    LOR             reduce using rule 23 (operand -> ID afterID .)
    LAND            reduce using rule 23 (operand -> ID afterID .)
    OR              reduce using rule 23 (operand -> ID afterID .)
    XOR             reduce using rule 23 (operand -> ID afterID .)
    AND             reduce using rule 23 (operand -> ID afterID .)
    SEMI            reduce using rule 23 (operand -> ID afterID .)
    RBRACKET        reduce using rule 23 (operand -> ID afterID .)
    COLON           reduce using rule 23 (operand -> ID afterID .)


state 148

    (127) funcCall -> ID LPAREN . args RPAREN
    (18) args -> . typeSpecList
    (19) args -> . operandList
    (20) args -> . empty
    (50) typeSpecList -> . typeSpecList COMMA typeSpec ID
    (51) typeSpecList -> . typeSpec ID
    (21) operandList -> . operandList COMMA operand
    (22) operandList -> . operand
    (1) empty -> .
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (127) funcCall -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 1 (empty -> .)
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21

    args                           shift and go to state 187
    typeSpecList                   shift and go to state 100
    operandList                    shift and go to state 101
    empty                          shift and go to state 102
    typeSpec                       shift and go to state 96
    operand                        shift and go to state 103
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104
    funcCall                       shift and go to state 106

state 149

    (26) operand -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 188


state 150

    (17) funcList -> typeSpec ID LPAREN args RPAREN . scope
    (29) scope -> . LBRACE afterLBRACE statementList RBRACE afterRBRACE

    LBRACE          shift and go to state 190

    scope                          shift and go to state 189

state 151

    (50) typeSpecList -> typeSpecList COMMA . typeSpec ID
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID

    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21

    typeSpec                       shift and go to state 191
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104

state 152

    (21) operandList -> operandList COMMA . operand
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    operand                        shift and go to state 192
    funcCall                       shift and go to state 106

state 153

    (27) operand -> MINUS NUMCONST .

    COMMA           reduce using rule 27 (operand -> MINUS NUMCONST .)
    RPAREN          reduce using rule 27 (operand -> MINUS NUMCONST .)
    PERIOD          reduce using rule 27 (operand -> MINUS NUMCONST .)
    LBRACKET        reduce using rule 27 (operand -> MINUS NUMCONST .)
    INCREMENT       reduce using rule 27 (operand -> MINUS NUMCONST .)
    DECREMENT       reduce using rule 27 (operand -> MINUS NUMCONST .)
    TIMES           reduce using rule 27 (operand -> MINUS NUMCONST .)
    DIVIDE          reduce using rule 27 (operand -> MINUS NUMCONST .)
    MODULO          reduce using rule 27 (operand -> MINUS NUMCONST .)
    PLUS            reduce using rule 27 (operand -> MINUS NUMCONST .)
    MINUS           reduce using rule 27 (operand -> MINUS NUMCONST .)
    LSHIFT          reduce using rule 27 (operand -> MINUS NUMCONST .)
    RSHIFT          reduce using rule 27 (operand -> MINUS NUMCONST .)
    EQ              reduce using rule 27 (operand -> MINUS NUMCONST .)
    NE              reduce using rule 27 (operand -> MINUS NUMCONST .)
    LE              reduce using rule 27 (operand -> MINUS NUMCONST .)
    GE              reduce using rule 27 (operand -> MINUS NUMCONST .)
    LANGLE          reduce using rule 27 (operand -> MINUS NUMCONST .)
    RANGLE          reduce using rule 27 (operand -> MINUS NUMCONST .)
    LOR             reduce using rule 27 (operand -> MINUS NUMCONST .)
    LAND            reduce using rule 27 (operand -> MINUS NUMCONST .)
    OR              reduce using rule 27 (operand -> MINUS NUMCONST .)
    XOR             reduce using rule 27 (operand -> MINUS NUMCONST .)
    AND             reduce using rule 27 (operand -> MINUS NUMCONST .)
    SEMI            reduce using rule 27 (operand -> MINUS NUMCONST .)
    RBRACKET        reduce using rule 27 (operand -> MINUS NUMCONST .)
    COLON           reduce using rule 27 (operand -> MINUS NUMCONST .)


state 154

    (130) logicalExpr -> logicalExpr LOR . compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 193
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 155

    (131) logicalExpr -> logicalExpr LAND . compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 194
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 156

    (132) logicalExpr -> logicalExpr OR . compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 195
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 157

    (133) logicalExpr -> logicalExpr XOR . compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 196
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 158

    (134) logicalExpr -> logicalExpr AND . compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 197
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 159

    (136) compOps -> compOps EQ . shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    shiftExpr                      shift and go to state 198
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 160

    (137) compOps -> compOps NE . shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    shiftExpr                      shift and go to state 199
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 161

    (138) compOps -> compOps LE . shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    shiftExpr                      shift and go to state 200
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 162

    (139) compOps -> compOps GE . shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    shiftExpr                      shift and go to state 201
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 163

    (140) compOps -> compOps LANGLE . shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    shiftExpr                      shift and go to state 202
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 164

    (141) compOps -> compOps RANGLE . shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    shiftExpr                      shift and go to state 203
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 165

    (143) shiftExpr -> shiftExpr LSHIFT . additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    additiveExpr                   shift and go to state 204
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 166

    (144) shiftExpr -> shiftExpr RSHIFT . additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    additiveExpr                   shift and go to state 205
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 167

    (145) additiveExpr -> additiveExpr PLUS . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    multiplicativeExpr             shift and go to state 206
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 168

    (146) additiveExpr -> additiveExpr MINUS . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    multiplicativeExpr             shift and go to state 207
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 169

    (148) multiplicativeExpr -> multiplicativeExpr TIMES . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    castExpr                       shift and go to state 208
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 170

    (149) multiplicativeExpr -> multiplicativeExpr DIVIDE . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    castExpr                       shift and go to state 209
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 171

    (150) multiplicativeExpr -> multiplicativeExpr MODULO . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    castExpr                       shift and go to state 210
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 172

    (159) unaryExpr -> unaryExpr INCREMENT .

    INCREMENT       reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    DECREMENT       reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    TIMES           reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    DIVIDE          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    MODULO          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    PLUS            reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    MINUS           reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    LSHIFT          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    RSHIFT          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    EQ              reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    NE              reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    LE              reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    GE              reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    LANGLE          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    RANGLE          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    LOR             reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    LAND            reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    OR              reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    XOR             reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    AND             reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    SEMI            reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    RPAREN          reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)
    RBRACKET        reduce using rule 159 (unaryExpr -> unaryExpr INCREMENT .)


state 173

    (160) unaryExpr -> unaryExpr DECREMENT .

    INCREMENT       reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    DECREMENT       reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    TIMES           reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    DIVIDE          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    MODULO          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    PLUS            reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    MINUS           reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    LSHIFT          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    RSHIFT          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    EQ              reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    NE              reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    LE              reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    GE              reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    LANGLE          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    RANGLE          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    LOR             reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    LAND            reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    OR              reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    XOR             reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    AND             reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    SEMI            reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    RPAREN          reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)
    RBRACKET        reduce using rule 160 (unaryExpr -> unaryExpr DECREMENT .)


state 174

    (153) castExpr -> LPAREN typeSpec . RPAREN castExpr

    RPAREN          shift and go to state 211


state 175

    (162) postfixExpr -> postfixExpr PERIOD . ID

    ID              shift and go to state 212


state 176

    (163) postfixExpr -> postfixExpr LBRACKET . expr RBRACKET
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    postfixExpr                    shift and go to state 118
    expr                           shift and go to state 213
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 177

    (155) unaryExpr -> LNOT unaryExpr .
    (159) unaryExpr -> unaryExpr . INCREMENT
    (160) unaryExpr -> unaryExpr . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    TIMES           reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    DIVIDE          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    MODULO          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    PLUS            reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    MINUS           reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    LSHIFT          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    RSHIFT          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    EQ              reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    NE              reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    LE              reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    GE              reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    LANGLE          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    RANGLE          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    LOR             reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    LAND            reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    OR              reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    XOR             reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    AND             reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    SEMI            reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    RPAREN          reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    RBRACKET        reduce using rule 155 (unaryExpr -> LNOT unaryExpr .)
    INCREMENT       shift and go to state 172
    DECREMENT       shift and go to state 173

  ! INCREMENT       [ reduce using rule 155 (unaryExpr -> LNOT unaryExpr .) ]
  ! DECREMENT       [ reduce using rule 155 (unaryExpr -> LNOT unaryExpr .) ]


state 178

    (156) unaryExpr -> NOT unaryExpr .
    (159) unaryExpr -> unaryExpr . INCREMENT
    (160) unaryExpr -> unaryExpr . DECREMENT

  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    TIMES           reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    DIVIDE          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    MODULO          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    PLUS            reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    MINUS           reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    LSHIFT          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    RSHIFT          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    EQ              reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    NE              reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    LE              reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    GE              reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    LANGLE          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    RANGLE          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    LOR             reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    LAND            reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    OR              reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    XOR             reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    AND             reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    SEMI            reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    RPAREN          reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    RBRACKET        reduce using rule 156 (unaryExpr -> NOT unaryExpr .)
    INCREMENT       shift and go to state 172
    DECREMENT       shift and go to state 173

  ! INCREMENT       [ reduce using rule 156 (unaryExpr -> NOT unaryExpr .) ]
  ! DECREMENT       [ reduce using rule 156 (unaryExpr -> NOT unaryExpr .) ]


state 179

    (157) unaryExpr -> SIZEOF LPAREN . unaryExpr RPAREN
    (158) unaryExpr -> SIZEOF LPAREN . typeSpec RPAREN
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    unaryExpr                      shift and go to state 214
    typeSpec                       shift and go to state 215
    postfixExpr                    shift and go to state 118
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 180

    (164) postfixExpr -> INCREMENT postfixExpr .
    (162) postfixExpr -> postfixExpr . PERIOD ID
    (163) postfixExpr -> postfixExpr . LBRACKET expr RBRACKET

  ! shift/reduce conflict for PERIOD resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    DECREMENT       reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    TIMES           reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    DIVIDE          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    MODULO          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    PLUS            reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    MINUS           reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    LSHIFT          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    RSHIFT          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    EQ              reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    NE              reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    LE              reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    GE              reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    LANGLE          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    RANGLE          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    LOR             reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    LAND            reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    OR              reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    XOR             reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    AND             reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    SEMI            reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    RPAREN          reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    RBRACKET        reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .)
    PERIOD          shift and go to state 175
    LBRACKET        shift and go to state 176

  ! PERIOD          [ reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .) ]
  ! LBRACKET        [ reduce using rule 164 (postfixExpr -> INCREMENT postfixExpr .) ]


state 181

    (165) postfixExpr -> DECREMENT postfixExpr .
    (162) postfixExpr -> postfixExpr . PERIOD ID
    (163) postfixExpr -> postfixExpr . LBRACKET expr RBRACKET

  ! shift/reduce conflict for PERIOD resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    INCREMENT       reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    DECREMENT       reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    TIMES           reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    DIVIDE          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    MODULO          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    PLUS            reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    MINUS           reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    LSHIFT          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    RSHIFT          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    EQ              reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    NE              reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    LE              reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    GE              reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    LANGLE          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    RANGLE          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    LOR             reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    LAND            reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    OR              reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    XOR             reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    AND             reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    SEMI            reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    RPAREN          reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    RBRACKET        reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .)
    PERIOD          shift and go to state 175
    LBRACKET        shift and go to state 176

  ! PERIOD          [ reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .) ]
  ! LBRACKET        [ reduce using rule 165 (postfixExpr -> DECREMENT postfixExpr .) ]


state 182

    (10) enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE . SEMI

    SEMI            shift and go to state 216


state 183

    (11) enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .

    PREPROC         reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    TYPEDEF         reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    EXTERN          reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    CONST           reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    ENUM            reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    AUTO            reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    VOLATILE        reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    STATIC          reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    REGISTER        reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    STRUCT          reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    UNION           reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    INT             reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    CHAR            reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    SHORT           reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    LONG            reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    FLOAT           reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    DOUBLE          reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    UNSIGNED        reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    SIGNED          reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)
    $end            reduce using rule 11 (enumDeclaration -> ENUM LBRACE enumArgs RBRACE SEMI .)


state 184

    (14) enumArgs -> enumArgs COMMA enumIDList .

    RBRACE          reduce using rule 14 (enumArgs -> enumArgs COMMA enumIDList .)
    COMMA           reduce using rule 14 (enumArgs -> enumArgs COMMA enumIDList .)


state 185

    (16) enumIDList -> ID EQUALS NUMCONST .

    RBRACE          reduce using rule 16 (enumIDList -> ID EQUALS NUMCONST .)
    COMMA           reduce using rule 16 (enumIDList -> ID EQUALS NUMCONST .)


state 186

    (39) varDeclList -> varDeclList varDecl SEMI .

    RBRACE          reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    TYPEDEF         reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    EXTERN          reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    CONST           reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    AUTO            reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    VOLATILE        reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    STATIC          reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    REGISTER        reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    STRUCT          reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    UNION           reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    INT             reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    CHAR            reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    SHORT           reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    LONG            reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    FLOAT           reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    DOUBLE          reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    UNSIGNED        reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)
    SIGNED          reduce using rule 39 (varDeclList -> varDeclList varDecl SEMI .)


state 187

    (127) funcCall -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 217


state 188

    (26) operand -> LPAREN expr RPAREN .

    COMMA           reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    PERIOD          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    LSHIFT          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    RSHIFT          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    EQ              reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    NE              reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    LE              reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    GE              reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    LANGLE          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    RANGLE          reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    LOR             reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    LAND            reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    OR              reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    XOR             reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    AND             reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 26 (operand -> LPAREN expr RPAREN .)
    COLON           reduce using rule 26 (operand -> LPAREN expr RPAREN .)


state 189

    (17) funcList -> typeSpec ID LPAREN args RPAREN scope .

    PREPROC         reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    TYPEDEF         reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    EXTERN          reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    CONST           reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    ENUM            reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    AUTO            reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    VOLATILE        reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    STATIC          reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    REGISTER        reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    STRUCT          reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    UNION           reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    INT             reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    CHAR            reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    SHORT           reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    LONG            reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    FLOAT           reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    DOUBLE          reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    UNSIGNED        reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    SIGNED          reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)
    $end            reduce using rule 17 (funcList -> typeSpec ID LPAREN args RPAREN scope .)


state 190

    (29) scope -> LBRACE . afterLBRACE statementList RBRACE afterRBRACE
    (31) afterLBRACE -> .

    WHILE           reduce using rule 31 (afterLBRACE -> .)
    IF              reduce using rule 31 (afterLBRACE -> .)
    FOR             reduce using rule 31 (afterLBRACE -> .)
    SWITCH          reduce using rule 31 (afterLBRACE -> .)
    ENUM            reduce using rule 31 (afterLBRACE -> .)
    RETURN          reduce using rule 31 (afterLBRACE -> .)
    TYPEDEF         reduce using rule 31 (afterLBRACE -> .)
    EXTERN          reduce using rule 31 (afterLBRACE -> .)
    CONST           reduce using rule 31 (afterLBRACE -> .)
    ID              reduce using rule 31 (afterLBRACE -> .)
    LPAREN          reduce using rule 31 (afterLBRACE -> .)
    GOTO            reduce using rule 31 (afterLBRACE -> .)
    DO              reduce using rule 31 (afterLBRACE -> .)
    AUTO            reduce using rule 31 (afterLBRACE -> .)
    VOLATILE        reduce using rule 31 (afterLBRACE -> .)
    STATIC          reduce using rule 31 (afterLBRACE -> .)
    REGISTER        reduce using rule 31 (afterLBRACE -> .)
    STRUCT          reduce using rule 31 (afterLBRACE -> .)
    UNION           reduce using rule 31 (afterLBRACE -> .)
    INT             reduce using rule 31 (afterLBRACE -> .)
    CHAR            reduce using rule 31 (afterLBRACE -> .)
    SHORT           reduce using rule 31 (afterLBRACE -> .)
    LONG            reduce using rule 31 (afterLBRACE -> .)
    FLOAT           reduce using rule 31 (afterLBRACE -> .)
    DOUBLE          reduce using rule 31 (afterLBRACE -> .)
    UNSIGNED        reduce using rule 31 (afterLBRACE -> .)
    SIGNED          reduce using rule 31 (afterLBRACE -> .)
    LNOT            reduce using rule 31 (afterLBRACE -> .)
    NOT             reduce using rule 31 (afterLBRACE -> .)
    SIZEOF          reduce using rule 31 (afterLBRACE -> .)
    INCREMENT       reduce using rule 31 (afterLBRACE -> .)
    DECREMENT       reduce using rule 31 (afterLBRACE -> .)
    NUMCONST        reduce using rule 31 (afterLBRACE -> .)
    MINUS           reduce using rule 31 (afterLBRACE -> .)
    RBRACE          reduce using rule 31 (afterLBRACE -> .)
    SEMI            reduce using rule 31 (afterLBRACE -> .)

    afterLBRACE                    shift and go to state 218

state 191

    (50) typeSpecList -> typeSpecList COMMA typeSpec . ID

    ID              shift and go to state 219


state 192

    (21) operandList -> operandList COMMA operand .

    COMMA           reduce using rule 21 (operandList -> operandList COMMA operand .)
    RPAREN          reduce using rule 21 (operandList -> operandList COMMA operand .)


state 193

    (130) logicalExpr -> logicalExpr LOR compOps .
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    LOR             reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    LAND            reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    OR              reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    XOR             reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    AND             reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    SEMI            reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    RPAREN          reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    RBRACKET        reduce using rule 130 (logicalExpr -> logicalExpr LOR compOps .)
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 194

    (131) logicalExpr -> logicalExpr LAND compOps .
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    LOR             reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    LAND            reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    OR              reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    XOR             reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    AND             reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    SEMI            reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    RPAREN          reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    RBRACKET        reduce using rule 131 (logicalExpr -> logicalExpr LAND compOps .)
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 195

    (132) logicalExpr -> logicalExpr OR compOps .
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    LOR             reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    LAND            reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    OR              reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    XOR             reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    AND             reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    SEMI            reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    RPAREN          reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    RBRACKET        reduce using rule 132 (logicalExpr -> logicalExpr OR compOps .)
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 196

    (133) logicalExpr -> logicalExpr XOR compOps .
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    LOR             reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    LAND            reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    OR              reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    XOR             reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    AND             reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    SEMI            reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    RPAREN          reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    RBRACKET        reduce using rule 133 (logicalExpr -> logicalExpr XOR compOps .)
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 197

    (134) logicalExpr -> logicalExpr AND compOps .
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    LOR             reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    LAND            reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    OR              reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    XOR             reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    AND             reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    SEMI            reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    RPAREN          reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    RBRACKET        reduce using rule 134 (logicalExpr -> logicalExpr AND compOps .)
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 198

    (136) compOps -> compOps EQ shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    NE              reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    LE              reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    GE              reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    LANGLE          reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    RANGLE          reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    LOR             reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    LAND            reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    OR              reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    XOR             reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    AND             reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    SEMI            reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    RPAREN          reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    RBRACKET        reduce using rule 136 (compOps -> compOps EQ shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 199

    (137) compOps -> compOps NE shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    NE              reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    LE              reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    GE              reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    LANGLE          reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    RANGLE          reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    LOR             reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    LAND            reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    OR              reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    XOR             reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    AND             reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    SEMI            reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    RPAREN          reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    RBRACKET        reduce using rule 137 (compOps -> compOps NE shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 200

    (138) compOps -> compOps LE shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    NE              reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    LE              reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    GE              reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    LANGLE          reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    RANGLE          reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    LOR             reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    LAND            reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    OR              reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    XOR             reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    AND             reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    SEMI            reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    RPAREN          reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    RBRACKET        reduce using rule 138 (compOps -> compOps LE shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 201

    (139) compOps -> compOps GE shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    NE              reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    LE              reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    GE              reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    LANGLE          reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    RANGLE          reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    LOR             reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    LAND            reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    OR              reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    XOR             reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    AND             reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    SEMI            reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    RPAREN          reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    RBRACKET        reduce using rule 139 (compOps -> compOps GE shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 202

    (140) compOps -> compOps LANGLE shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    NE              reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    LE              reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    GE              reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    LANGLE          reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    RANGLE          reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    LOR             reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    LAND            reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    OR              reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    XOR             reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    AND             reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    SEMI            reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    RPAREN          reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    RBRACKET        reduce using rule 140 (compOps -> compOps LANGLE shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 203

    (141) compOps -> compOps RANGLE shiftExpr .
    (143) shiftExpr -> shiftExpr . LSHIFT additiveExpr
    (144) shiftExpr -> shiftExpr . RSHIFT additiveExpr

    EQ              reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    NE              reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    LE              reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    GE              reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    LANGLE          reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    RANGLE          reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    LOR             reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    LAND            reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    OR              reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    XOR             reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    AND             reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    SEMI            reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    RPAREN          reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    RBRACKET        reduce using rule 141 (compOps -> compOps RANGLE shiftExpr .)
    LSHIFT          shift and go to state 165
    RSHIFT          shift and go to state 166


state 204

    (143) shiftExpr -> shiftExpr LSHIFT additiveExpr .
    (145) additiveExpr -> additiveExpr . PLUS multiplicativeExpr
    (146) additiveExpr -> additiveExpr . MINUS multiplicativeExpr

    LSHIFT          reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    RSHIFT          reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    EQ              reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    NE              reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    LE              reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    GE              reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    LANGLE          reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    RANGLE          reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    LOR             reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    LAND            reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    OR              reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    XOR             reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    AND             reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    SEMI            reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    RPAREN          reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    RBRACKET        reduce using rule 143 (shiftExpr -> shiftExpr LSHIFT additiveExpr .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 205

    (144) shiftExpr -> shiftExpr RSHIFT additiveExpr .
    (145) additiveExpr -> additiveExpr . PLUS multiplicativeExpr
    (146) additiveExpr -> additiveExpr . MINUS multiplicativeExpr

    LSHIFT          reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    RSHIFT          reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    EQ              reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    NE              reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    LE              reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    GE              reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    LANGLE          reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    RANGLE          reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    LOR             reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    LAND            reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    OR              reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    XOR             reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    AND             reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    SEMI            reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    RPAREN          reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    RBRACKET        reduce using rule 144 (shiftExpr -> shiftExpr RSHIFT additiveExpr .)
    PLUS            shift and go to state 167
    MINUS           shift and go to state 168


state 206

    (145) additiveExpr -> additiveExpr PLUS multiplicativeExpr .
    (148) multiplicativeExpr -> multiplicativeExpr . TIMES castExpr
    (149) multiplicativeExpr -> multiplicativeExpr . DIVIDE castExpr
    (150) multiplicativeExpr -> multiplicativeExpr . MODULO castExpr

    PLUS            reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    MINUS           reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    LSHIFT          reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    RSHIFT          reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    EQ              reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    NE              reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    LE              reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    GE              reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    LANGLE          reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    RANGLE          reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    LOR             reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    LAND            reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    OR              reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    XOR             reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    AND             reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    SEMI            reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    RPAREN          reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    RBRACKET        reduce using rule 145 (additiveExpr -> additiveExpr PLUS multiplicativeExpr .)
    TIMES           shift and go to state 169
    DIVIDE          shift and go to state 170
    MODULO          shift and go to state 171


state 207

    (146) additiveExpr -> additiveExpr MINUS multiplicativeExpr .
    (148) multiplicativeExpr -> multiplicativeExpr . TIMES castExpr
    (149) multiplicativeExpr -> multiplicativeExpr . DIVIDE castExpr
    (150) multiplicativeExpr -> multiplicativeExpr . MODULO castExpr

    PLUS            reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    MINUS           reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    LSHIFT          reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    RSHIFT          reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    EQ              reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    NE              reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    LE              reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    GE              reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    LANGLE          reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    RANGLE          reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    LOR             reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    LAND            reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    OR              reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    XOR             reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    AND             reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    SEMI            reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    RPAREN          reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    RBRACKET        reduce using rule 146 (additiveExpr -> additiveExpr MINUS multiplicativeExpr .)
    TIMES           shift and go to state 169
    DIVIDE          shift and go to state 170
    MODULO          shift and go to state 171


state 208

    (148) multiplicativeExpr -> multiplicativeExpr TIMES castExpr .

    TIMES           reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    DIVIDE          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    MODULO          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    PLUS            reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    MINUS           reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    LSHIFT          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    RSHIFT          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    EQ              reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    NE              reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    LE              reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    GE              reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    LANGLE          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    RANGLE          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    LOR             reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    LAND            reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    OR              reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    XOR             reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    AND             reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    SEMI            reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    RPAREN          reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)
    RBRACKET        reduce using rule 148 (multiplicativeExpr -> multiplicativeExpr TIMES castExpr .)


state 209

    (149) multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .

    TIMES           reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    DIVIDE          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    MODULO          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    PLUS            reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    MINUS           reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    LSHIFT          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    RSHIFT          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    EQ              reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    NE              reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    LE              reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    GE              reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    LANGLE          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    RANGLE          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    LOR             reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    LAND            reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    OR              reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    XOR             reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    AND             reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    SEMI            reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    RPAREN          reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)
    RBRACKET        reduce using rule 149 (multiplicativeExpr -> multiplicativeExpr DIVIDE castExpr .)


state 210

    (150) multiplicativeExpr -> multiplicativeExpr MODULO castExpr .

    TIMES           reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    DIVIDE          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    MODULO          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    PLUS            reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    MINUS           reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    LSHIFT          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    RSHIFT          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    EQ              reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    NE              reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    LE              reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    GE              reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    LANGLE          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    RANGLE          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    LOR             reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    LAND            reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    OR              reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    XOR             reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    AND             reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    SEMI            reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    RPAREN          reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)
    RBRACKET        reduce using rule 150 (multiplicativeExpr -> multiplicativeExpr MODULO castExpr .)


state 211

    (153) castExpr -> LPAREN typeSpec RPAREN . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    castExpr                       shift and go to state 220
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 212

    (162) postfixExpr -> postfixExpr PERIOD ID .

    PERIOD          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    LBRACKET        reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    INCREMENT       reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    DECREMENT       reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    TIMES           reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    DIVIDE          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    MODULO          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    PLUS            reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    MINUS           reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    LSHIFT          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    RSHIFT          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    EQ              reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    NE              reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    LE              reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    GE              reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    LANGLE          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    RANGLE          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    LOR             reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    LAND            reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    OR              reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    XOR             reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    AND             reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    SEMI            reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    RPAREN          reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)
    RBRACKET        reduce using rule 162 (postfixExpr -> postfixExpr PERIOD ID .)


state 213

    (163) postfixExpr -> postfixExpr LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 221


state 214

    (157) unaryExpr -> SIZEOF LPAREN unaryExpr . RPAREN
    (159) unaryExpr -> unaryExpr . INCREMENT
    (160) unaryExpr -> unaryExpr . DECREMENT

    RPAREN          shift and go to state 222
    INCREMENT       shift and go to state 172
    DECREMENT       shift and go to state 173


state 215

    (158) unaryExpr -> SIZEOF LPAREN typeSpec . RPAREN

    RPAREN          shift and go to state 223


state 216

    (10) enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .

    PREPROC         reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    TYPEDEF         reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    EXTERN          reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    CONST           reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    ENUM            reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    AUTO            reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    VOLATILE        reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    STATIC          reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    REGISTER        reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    STRUCT          reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    UNION           reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    INT             reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    CHAR            reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    SHORT           reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    LONG            reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    FLOAT           reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    DOUBLE          reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    UNSIGNED        reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    SIGNED          reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)
    $end            reduce using rule 10 (enumDeclaration -> ENUM ID LBRACE enumArgs RBRACE SEMI .)


state 217

    (127) funcCall -> ID LPAREN args RPAREN .

    COMMA           reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    PERIOD          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    LBRACKET        reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    INCREMENT       reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    DECREMENT       reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    MODULO          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    LSHIFT          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    RSHIFT          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    NE              reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    LE              reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    GE              reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    LANGLE          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    RANGLE          reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    LOR             reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    LAND            reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    OR              reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    XOR             reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    AND             reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    SEMI            reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)
    COLON           reduce using rule 127 (funcCall -> ID LPAREN args RPAREN .)


state 218

    (29) scope -> LBRACE afterLBRACE . statementList RBRACE afterRBRACE
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    statementList                  shift and go to state 224
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 219

    (50) typeSpecList -> typeSpecList COMMA typeSpec ID .

    COMMA           reduce using rule 50 (typeSpecList -> typeSpecList COMMA typeSpec ID .)
    RPAREN          reduce using rule 50 (typeSpecList -> typeSpecList COMMA typeSpec ID .)


state 220

    (153) castExpr -> LPAREN typeSpec RPAREN castExpr .

    TIMES           reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    DIVIDE          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    MODULO          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    PLUS            reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    MINUS           reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    LSHIFT          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    RSHIFT          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    EQ              reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    NE              reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    LE              reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    GE              reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    LANGLE          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    RANGLE          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    LOR             reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    LAND            reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    OR              reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    XOR             reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    AND             reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    SEMI            reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    RPAREN          reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)
    RBRACKET        reduce using rule 153 (castExpr -> LPAREN typeSpec RPAREN castExpr .)


state 221

    (163) postfixExpr -> postfixExpr LBRACKET expr RBRACKET .

    PERIOD          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    INCREMENT       reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    DECREMENT       reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    MODULO          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    LSHIFT          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    RSHIFT          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    EQ              reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    NE              reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    LE              reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    GE              reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    LANGLE          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    RANGLE          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    LOR             reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    LAND            reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    OR              reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    XOR             reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    AND             reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    SEMI            reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 163 (postfixExpr -> postfixExpr LBRACKET expr RBRACKET .)


state 222

    (157) unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .

    INCREMENT       reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    DECREMENT       reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    TIMES           reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    DIVIDE          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    MODULO          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    PLUS            reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    MINUS           reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    LSHIFT          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    RSHIFT          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    EQ              reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    NE              reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    LE              reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    GE              reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    LANGLE          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    RANGLE          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    LOR             reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    LAND            reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    OR              reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    XOR             reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    AND             reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    SEMI            reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    RPAREN          reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)
    RBRACKET        reduce using rule 157 (unaryExpr -> SIZEOF LPAREN unaryExpr RPAREN .)


state 223

    (158) unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .

    INCREMENT       reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    DECREMENT       reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    TIMES           reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    DIVIDE          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    MODULO          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    PLUS            reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    MINUS           reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    LSHIFT          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    RSHIFT          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    EQ              reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    NE              reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    LE              reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    GE              reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    LANGLE          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    RANGLE          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    LOR             reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    LAND            reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    OR              reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    XOR             reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    AND             reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    SEMI            reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    RPAREN          reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)
    RBRACKET        reduce using rule 158 (unaryExpr -> SIZEOF LPAREN typeSpec RPAREN .)


state 224

    (29) scope -> LBRACE afterLBRACE statementList . RBRACE afterRBRACE

    RBRACE          shift and go to state 248


state 225

    (83) statementList -> empty .
    (95) statement -> empty .

    RBRACE          reduce using rule 83 (statementList -> empty .)
    CASE            reduce using rule 83 (statementList -> empty .)
    DEFAULT         reduce using rule 83 (statementList -> empty .)
    SEMI            reduce using rule 95 (statement -> empty .)


state 226

    (84) statementList -> statement . SEMI statementList

    SEMI            shift and go to state 249


state 227

    (85) statementList -> whileLoop . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    whileLoop                      shift and go to state 227
    statementList                  shift and go to state 250
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 228

    (86) statementList -> ifStmt . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    ifStmt                         shift and go to state 228
    statementList                  shift and go to state 251
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 229

    (87) statementList -> forLoop . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    forLoop                        shift and go to state 229
    statementList                  shift and go to state 252
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 230

    (88) statementList -> switch . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    switch                         shift and go to state 230
    statementList                  shift and go to state 253
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 231

    (89) statementList -> enumInScope . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    enumInScope                    shift and go to state 231
    statementList                  shift and go to state 254
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 232

    (90) statement -> returnStmt .

    SEMI            reduce using rule 90 (statement -> returnStmt .)


state 233

    (91) statement -> varDecl .

    SEMI            reduce using rule 91 (statement -> varDecl .)


state 234

    (92) statement -> varAssign .

    SEMI            reduce using rule 92 (statement -> varAssign .)


state 235

    (93) statement -> gotoStmt .

    SEMI            reduce using rule 93 (statement -> gotoStmt .)


state 236

    (94) statement -> expr .

    SEMI            reduce using rule 94 (statement -> expr .)


state 237

    (96) statement -> doWhile .

    SEMI            reduce using rule 96 (statement -> doWhile .)


state 238

    (97) whileLoop -> WHILE . LPAREN conditionals RPAREN loopScope

    LPAREN          shift and go to state 255


state 239

    (168) varAssign -> LPAREN . varAssign RPAREN
    (153) castExpr -> LPAREN . typeSpec RPAREN castExpr
    (26) operand -> LPAREN . expr RPAREN
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (128) expr -> . logicalExpr
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    varAssign                      shift and go to state 79
    typeSpec                       shift and go to state 174
    castExpr                       shift and go to state 115
    expr                           shift and go to state 149
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 240

    (98) ifStmt -> IF . LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> IF . LPAREN conditionals RPAREN conditionalScope elseIfList

    LPAREN          shift and go to state 256


state 241

    (105) forLoop -> FOR . LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> FOR . LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> FOR . LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> FOR . LPAREN init SEMI compOps SEMI increase RPAREN loopScope

    LPAREN          shift and go to state 257


state 242

    (116) switch -> SWITCH . LPAREN expr RPAREN switchscope

    LPAREN          shift and go to state 258


state 243

    (8) enumInScope -> ENUM . ID ID SEMI

    ID              shift and go to state 259


state 244

    (166) varAssign -> ID . EQUALS expr
    (167) varAssign -> ID . EQUALS STRING
    (169) varAssign -> ID . TIMESEQUAL expr
    (170) varAssign -> ID . DIVEQUAL expr
    (171) varAssign -> ID . MODEQUAL expr
    (172) varAssign -> ID . PLUSEQUAL expr
    (173) varAssign -> ID . MINUSEQUAL expr
    (174) varAssign -> ID . LSHIFTEQUAL expr
    (175) varAssign -> ID . RSHIFTEQUAL expr
    (176) varAssign -> ID . ANDEQUAL expr
    (177) varAssign -> ID . OREQUAL expr
    (178) varAssign -> ID . XOREQUAL expr
    (23) operand -> ID . afterID
    (127) funcCall -> ID . LPAREN args RPAREN
    (28) afterID -> .

    EQUALS          shift and go to state 67
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 69
    MODEQUAL        shift and go to state 70
    PLUSEQUAL       shift and go to state 71
    MINUSEQUAL      shift and go to state 72
    LSHIFTEQUAL     shift and go to state 73
    RSHIFTEQUAL     shift and go to state 74
    ANDEQUAL        shift and go to state 75
    OREQUAL         shift and go to state 76
    XOREQUAL        shift and go to state 77
    LPAREN          shift and go to state 148
    PERIOD          reduce using rule 28 (afterID -> .)
    LBRACKET        reduce using rule 28 (afterID -> .)
    INCREMENT       reduce using rule 28 (afterID -> .)
    DECREMENT       reduce using rule 28 (afterID -> .)
    TIMES           reduce using rule 28 (afterID -> .)
    DIVIDE          reduce using rule 28 (afterID -> .)
    MODULO          reduce using rule 28 (afterID -> .)
    PLUS            reduce using rule 28 (afterID -> .)
    MINUS           reduce using rule 28 (afterID -> .)
    LSHIFT          reduce using rule 28 (afterID -> .)
    RSHIFT          reduce using rule 28 (afterID -> .)
    EQ              reduce using rule 28 (afterID -> .)
    NE              reduce using rule 28 (afterID -> .)
    LE              reduce using rule 28 (afterID -> .)
    GE              reduce using rule 28 (afterID -> .)
    LANGLE          reduce using rule 28 (afterID -> .)
    RANGLE          reduce using rule 28 (afterID -> .)
    LOR             reduce using rule 28 (afterID -> .)
    LAND            reduce using rule 28 (afterID -> .)
    OR              reduce using rule 28 (afterID -> .)
    XOR             reduce using rule 28 (afterID -> .)
    AND             reduce using rule 28 (afterID -> .)
    SEMI            reduce using rule 28 (afterID -> .)
    RPAREN          reduce using rule 28 (afterID -> .)

    afterID                        shift and go to state 147

state 245

    (123) returnStmt -> RETURN . expr
    (124) returnStmt -> RETURN . varAssign
    (128) expr -> . logicalExpr
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 260
    varAssign                      shift and go to state 261
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 246

    (125) gotoStmt -> GOTO . ID

    ID              shift and go to state 262


state 247

    (104) doWhile -> DO . loopScope WHILE LPAREN conditionals RPAREN
    (32) loopScope -> . LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 264

    loopScope                      shift and go to state 263

state 248

    (29) scope -> LBRACE afterLBRACE statementList RBRACE . afterRBRACE
    (30) afterRBRACE -> .

    PREPROC         reduce using rule 30 (afterRBRACE -> .)
    TYPEDEF         reduce using rule 30 (afterRBRACE -> .)
    EXTERN          reduce using rule 30 (afterRBRACE -> .)
    CONST           reduce using rule 30 (afterRBRACE -> .)
    ENUM            reduce using rule 30 (afterRBRACE -> .)
    AUTO            reduce using rule 30 (afterRBRACE -> .)
    VOLATILE        reduce using rule 30 (afterRBRACE -> .)
    STATIC          reduce using rule 30 (afterRBRACE -> .)
    REGISTER        reduce using rule 30 (afterRBRACE -> .)
    STRUCT          reduce using rule 30 (afterRBRACE -> .)
    UNION           reduce using rule 30 (afterRBRACE -> .)
    INT             reduce using rule 30 (afterRBRACE -> .)
    CHAR            reduce using rule 30 (afterRBRACE -> .)
    SHORT           reduce using rule 30 (afterRBRACE -> .)
    LONG            reduce using rule 30 (afterRBRACE -> .)
    FLOAT           reduce using rule 30 (afterRBRACE -> .)
    DOUBLE          reduce using rule 30 (afterRBRACE -> .)
    UNSIGNED        reduce using rule 30 (afterRBRACE -> .)
    SIGNED          reduce using rule 30 (afterRBRACE -> .)
    $end            reduce using rule 30 (afterRBRACE -> .)

    afterRBRACE                    shift and go to state 265

state 249

    (84) statementList -> statement SEMI . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    statement                      shift and go to state 226
    statementList                  shift and go to state 266
    empty                          shift and go to state 225
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 250

    (85) statementList -> whileLoop statementList .

    RBRACE          reduce using rule 85 (statementList -> whileLoop statementList .)
    CASE            reduce using rule 85 (statementList -> whileLoop statementList .)
    DEFAULT         reduce using rule 85 (statementList -> whileLoop statementList .)


state 251

    (86) statementList -> ifStmt statementList .

    RBRACE          reduce using rule 86 (statementList -> ifStmt statementList .)
    CASE            reduce using rule 86 (statementList -> ifStmt statementList .)
    DEFAULT         reduce using rule 86 (statementList -> ifStmt statementList .)


state 252

    (87) statementList -> forLoop statementList .

    RBRACE          reduce using rule 87 (statementList -> forLoop statementList .)
    CASE            reduce using rule 87 (statementList -> forLoop statementList .)
    DEFAULT         reduce using rule 87 (statementList -> forLoop statementList .)


state 253

    (88) statementList -> switch statementList .

    RBRACE          reduce using rule 88 (statementList -> switch statementList .)
    CASE            reduce using rule 88 (statementList -> switch statementList .)
    DEFAULT         reduce using rule 88 (statementList -> switch statementList .)


state 254

    (89) statementList -> enumInScope statementList .

    RBRACE          reduce using rule 89 (statementList -> enumInScope statementList .)
    CASE            reduce using rule 89 (statementList -> enumInScope statementList .)
    DEFAULT         reduce using rule 89 (statementList -> enumInScope statementList .)


state 255

    (97) whileLoop -> WHILE LPAREN . conditionals RPAREN loopScope
    (179) conditionals -> . expr
    (180) conditionals -> . TRUE
    (181) conditionals -> . FALSE
    (182) conditionals -> . LPAREN conditionals RPAREN
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    TRUE            shift and go to state 270
    FALSE           shift and go to state 271
    LPAREN          shift and go to state 267
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    conditionals                   shift and go to state 268
    expr                           shift and go to state 269
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 256

    (98) ifStmt -> IF LPAREN . conditionals RPAREN conditionalScope
    (99) ifStmt -> IF LPAREN . conditionals RPAREN conditionalScope elseIfList
    (179) conditionals -> . expr
    (180) conditionals -> . TRUE
    (181) conditionals -> . FALSE
    (182) conditionals -> . LPAREN conditionals RPAREN
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    TRUE            shift and go to state 270
    FALSE           shift and go to state 271
    LPAREN          shift and go to state 267
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    conditionals                   shift and go to state 272
    expr                           shift and go to state 269
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 257

    (105) forLoop -> FOR LPAREN . empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> FOR LPAREN . init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> FOR LPAREN . empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> FOR LPAREN . init SEMI compOps SEMI increase RPAREN loopScope
    (1) empty -> .
    (109) init -> . typeSpec varAssign
    (110) init -> . varAssign
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID

    SEMI            reduce using rule 1 (empty -> .)
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    ID              shift and go to state 80
    LPAREN          shift and go to state 35
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21

    empty                          shift and go to state 273
    init                           shift and go to state 274
    typeSpec                       shift and go to state 275
    varAssign                      shift and go to state 276
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104

state 258

    (116) switch -> SWITCH LPAREN . expr RPAREN switchscope
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    expr                           shift and go to state 277
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 259

    (8) enumInScope -> ENUM ID . ID SEMI

    ID              shift and go to state 278


state 260

    (123) returnStmt -> RETURN expr .

    SEMI            reduce using rule 123 (returnStmt -> RETURN expr .)


state 261

    (124) returnStmt -> RETURN varAssign .

    SEMI            reduce using rule 124 (returnStmt -> RETURN varAssign .)


state 262

    (125) gotoStmt -> GOTO ID .

    SEMI            reduce using rule 125 (gotoStmt -> GOTO ID .)


state 263

    (104) doWhile -> DO loopScope . WHILE LPAREN conditionals RPAREN

    WHILE           shift and go to state 279


state 264

    (32) loopScope -> LBRACE . afterLoopLBrace loopStatementList RBRACE afterLoopRBrace
    (33) afterLoopLBrace -> .

    BREAK           reduce using rule 33 (afterLoopLBrace -> .)
    CONTINUE        reduce using rule 33 (afterLoopLBrace -> .)
    WHILE           reduce using rule 33 (afterLoopLBrace -> .)
    IF              reduce using rule 33 (afterLoopLBrace -> .)
    FOR             reduce using rule 33 (afterLoopLBrace -> .)
    SWITCH          reduce using rule 33 (afterLoopLBrace -> .)
    ENUM            reduce using rule 33 (afterLoopLBrace -> .)
    RETURN          reduce using rule 33 (afterLoopLBrace -> .)
    TYPEDEF         reduce using rule 33 (afterLoopLBrace -> .)
    EXTERN          reduce using rule 33 (afterLoopLBrace -> .)
    CONST           reduce using rule 33 (afterLoopLBrace -> .)
    ID              reduce using rule 33 (afterLoopLBrace -> .)
    LPAREN          reduce using rule 33 (afterLoopLBrace -> .)
    GOTO            reduce using rule 33 (afterLoopLBrace -> .)
    DO              reduce using rule 33 (afterLoopLBrace -> .)
    AUTO            reduce using rule 33 (afterLoopLBrace -> .)
    VOLATILE        reduce using rule 33 (afterLoopLBrace -> .)
    STATIC          reduce using rule 33 (afterLoopLBrace -> .)
    REGISTER        reduce using rule 33 (afterLoopLBrace -> .)
    STRUCT          reduce using rule 33 (afterLoopLBrace -> .)
    UNION           reduce using rule 33 (afterLoopLBrace -> .)
    INT             reduce using rule 33 (afterLoopLBrace -> .)
    CHAR            reduce using rule 33 (afterLoopLBrace -> .)
    SHORT           reduce using rule 33 (afterLoopLBrace -> .)
    LONG            reduce using rule 33 (afterLoopLBrace -> .)
    FLOAT           reduce using rule 33 (afterLoopLBrace -> .)
    DOUBLE          reduce using rule 33 (afterLoopLBrace -> .)
    UNSIGNED        reduce using rule 33 (afterLoopLBrace -> .)
    SIGNED          reduce using rule 33 (afterLoopLBrace -> .)
    LNOT            reduce using rule 33 (afterLoopLBrace -> .)
    NOT             reduce using rule 33 (afterLoopLBrace -> .)
    SIZEOF          reduce using rule 33 (afterLoopLBrace -> .)
    INCREMENT       reduce using rule 33 (afterLoopLBrace -> .)
    DECREMENT       reduce using rule 33 (afterLoopLBrace -> .)
    NUMCONST        reduce using rule 33 (afterLoopLBrace -> .)
    MINUS           reduce using rule 33 (afterLoopLBrace -> .)
    RBRACE          reduce using rule 33 (afterLoopLBrace -> .)
    SEMI            reduce using rule 33 (afterLoopLBrace -> .)

    afterLoopLBrace                shift and go to state 280

state 265

    (29) scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .

    PREPROC         reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    TYPEDEF         reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    EXTERN          reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    CONST           reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    ENUM            reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    AUTO            reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    VOLATILE        reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    STATIC          reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    REGISTER        reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    STRUCT          reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    UNION           reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    INT             reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    CHAR            reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    SHORT           reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    LONG            reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    FLOAT           reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    DOUBLE          reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    UNSIGNED        reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    SIGNED          reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)
    $end            reduce using rule 29 (scope -> LBRACE afterLBRACE statementList RBRACE afterRBRACE .)


state 266

    (84) statementList -> statement SEMI statementList .

    RBRACE          reduce using rule 84 (statementList -> statement SEMI statementList .)
    CASE            reduce using rule 84 (statementList -> statement SEMI statementList .)
    DEFAULT         reduce using rule 84 (statementList -> statement SEMI statementList .)


state 267

    (182) conditionals -> LPAREN . conditionals RPAREN
    (153) castExpr -> LPAREN . typeSpec RPAREN castExpr
    (26) operand -> LPAREN . expr RPAREN
    (179) conditionals -> . expr
    (180) conditionals -> . TRUE
    (181) conditionals -> . FALSE
    (182) conditionals -> . LPAREN conditionals RPAREN
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (128) expr -> . logicalExpr
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    TRUE            shift and go to state 270
    FALSE           shift and go to state 271
    LPAREN          shift and go to state 267
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    CONST           shift and go to state 38
    REGISTER        shift and go to state 19
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    conditionals                   shift and go to state 281
    typeSpec                       shift and go to state 174
    castExpr                       shift and go to state 115
    expr                           shift and go to state 282
    typeSpecPostfix                shift and go to state 11
    combineType                    shift and go to state 104
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 268

    (97) whileLoop -> WHILE LPAREN conditionals . RPAREN loopScope

    RPAREN          shift and go to state 283


state 269

    (179) conditionals -> expr .

    RPAREN          reduce using rule 179 (conditionals -> expr .)


state 270

    (180) conditionals -> TRUE .

    RPAREN          reduce using rule 180 (conditionals -> TRUE .)


state 271

    (181) conditionals -> FALSE .

    RPAREN          reduce using rule 181 (conditionals -> FALSE .)


state 272

    (98) ifStmt -> IF LPAREN conditionals . RPAREN conditionalScope
    (99) ifStmt -> IF LPAREN conditionals . RPAREN conditionalScope elseIfList

    RPAREN          shift and go to state 284


state 273

    (105) forLoop -> FOR LPAREN empty . SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> FOR LPAREN empty . SEMI compOps SEMI increase RPAREN loopScope

    SEMI            shift and go to state 285


state 274

    (106) forLoop -> FOR LPAREN init . SEMI compOps SEMI empty RPAREN loopScope
    (108) forLoop -> FOR LPAREN init . SEMI compOps SEMI increase RPAREN loopScope

    SEMI            shift and go to state 286


state 275

    (109) init -> typeSpec . varAssign
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr

    ID              shift and go to state 80
    LPAREN          shift and go to state 35

    varAssign                      shift and go to state 287

state 276

    (110) init -> varAssign .

    SEMI            reduce using rule 110 (init -> varAssign .)


state 277

    (116) switch -> SWITCH LPAREN expr . RPAREN switchscope

    RPAREN          shift and go to state 288


state 278

    (8) enumInScope -> ENUM ID ID . SEMI

    SEMI            shift and go to state 289


state 279

    (104) doWhile -> DO loopScope WHILE . LPAREN conditionals RPAREN

    LPAREN          shift and go to state 290


state 280

    (32) loopScope -> LBRACE afterLoopLBrace . loopStatementList RBRACE afterLoopRBrace
    (35) loopStatementList -> . breakStmt SEMI loopStatementList
    (36) loopStatementList -> . continueStmt SEMI loopStatementList
    (37) loopStatementList -> . statementList
    (126) breakStmt -> . BREAK
    (38) continueStmt -> . CONTINUE
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    BREAK           shift and go to state 295
    CONTINUE        shift and go to state 296
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    loopStatementList              shift and go to state 291
    breakStmt                      shift and go to state 292
    continueStmt                   shift and go to state 293
    statementList                  shift and go to state 294
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 281

    (182) conditionals -> LPAREN conditionals . RPAREN

    RPAREN          shift and go to state 297


state 282

    (26) operand -> LPAREN expr . RPAREN
    (179) conditionals -> expr .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 188

  ! RPAREN          [ reduce using rule 179 (conditionals -> expr .) ]


state 283

    (97) whileLoop -> WHILE LPAREN conditionals RPAREN . loopScope
    (32) loopScope -> . LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 264

    loopScope                      shift and go to state 298

state 284

    (98) ifStmt -> IF LPAREN conditionals RPAREN . conditionalScope
    (99) ifStmt -> IF LPAREN conditionals RPAREN . conditionalScope elseIfList
    (103) conditionalScope -> . LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 300

    conditionalScope               shift and go to state 299

state 285

    (105) forLoop -> FOR LPAREN empty SEMI . compOps SEMI empty RPAREN loopScope
    (107) forLoop -> FOR LPAREN empty SEMI . compOps SEMI increase RPAREN loopScope
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 301
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 286

    (106) forLoop -> FOR LPAREN init SEMI . compOps SEMI empty RPAREN loopScope
    (108) forLoop -> FOR LPAREN init SEMI . compOps SEMI increase RPAREN loopScope
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 117
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    compOps                        shift and go to state 302
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 287

    (109) init -> typeSpec varAssign .

    SEMI            reduce using rule 109 (init -> typeSpec varAssign .)


state 288

    (116) switch -> SWITCH LPAREN expr RPAREN . switchscope
    (117) switchscope -> . LBRACE caseList RBRACE

    LBRACE          shift and go to state 304

    switchscope                    shift and go to state 303

state 289

    (8) enumInScope -> ENUM ID ID SEMI .

    WHILE           reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    IF              reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    FOR             reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    SWITCH          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    ENUM            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    RETURN          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    TYPEDEF         reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    EXTERN          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    CONST           reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    ID              reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    LPAREN          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    GOTO            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    DO              reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    AUTO            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    VOLATILE        reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    STATIC          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    REGISTER        reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    STRUCT          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    UNION           reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    INT             reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    CHAR            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    SHORT           reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    LONG            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    FLOAT           reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    DOUBLE          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    UNSIGNED        reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    SIGNED          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    LNOT            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    NOT             reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    SIZEOF          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    INCREMENT       reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    DECREMENT       reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    NUMCONST        reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    MINUS           reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    SEMI            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    RBRACE          reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    CASE            reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)
    DEFAULT         reduce using rule 8 (enumInScope -> ENUM ID ID SEMI .)


state 290

    (104) doWhile -> DO loopScope WHILE LPAREN . conditionals RPAREN
    (179) conditionals -> . expr
    (180) conditionals -> . TRUE
    (181) conditionals -> . FALSE
    (182) conditionals -> . LPAREN conditionals RPAREN
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    TRUE            shift and go to state 270
    FALSE           shift and go to state 271
    LPAREN          shift and go to state 267
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    conditionals                   shift and go to state 305
    expr                           shift and go to state 269
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 291

    (32) loopScope -> LBRACE afterLoopLBrace loopStatementList . RBRACE afterLoopRBrace

    RBRACE          shift and go to state 306


state 292

    (35) loopStatementList -> breakStmt . SEMI loopStatementList

    SEMI            shift and go to state 307


state 293

    (36) loopStatementList -> continueStmt . SEMI loopStatementList

    SEMI            shift and go to state 308


state 294

    (37) loopStatementList -> statementList .

    RBRACE          reduce using rule 37 (loopStatementList -> statementList .)


state 295

    (126) breakStmt -> BREAK .

    SEMI            reduce using rule 126 (breakStmt -> BREAK .)


state 296

    (38) continueStmt -> CONTINUE .

    SEMI            reduce using rule 38 (continueStmt -> CONTINUE .)


state 297

    (182) conditionals -> LPAREN conditionals RPAREN .

    RPAREN          reduce using rule 182 (conditionals -> LPAREN conditionals RPAREN .)


state 298

    (97) whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .

    WHILE           reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    IF              reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    FOR             reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    SWITCH          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    ENUM            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    RETURN          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    TYPEDEF         reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    EXTERN          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    CONST           reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    ID              reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    LPAREN          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    GOTO            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    DO              reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    AUTO            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    VOLATILE        reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    STATIC          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    REGISTER        reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    STRUCT          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    UNION           reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    INT             reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    CHAR            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    SHORT           reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    LONG            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    FLOAT           reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    DOUBLE          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    UNSIGNED        reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    SIGNED          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    LNOT            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    NOT             reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    SIZEOF          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    INCREMENT       reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    DECREMENT       reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    NUMCONST        reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    MINUS           reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    SEMI            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    RBRACE          reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    CASE            reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)
    DEFAULT         reduce using rule 97 (whileLoop -> WHILE LPAREN conditionals RPAREN loopScope .)


state 299

    (98) ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .
    (99) ifStmt -> IF LPAREN conditionals RPAREN conditionalScope . elseIfList
    (100) elseIfList -> . ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (101) elseIfList -> . ELSE IF LPAREN conditionals RPAREN conditionalScope
    (102) elseIfList -> . ELSE conditionalScope

    WHILE           reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    IF              reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    FOR             reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    SWITCH          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    ENUM            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    RETURN          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    TYPEDEF         reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    EXTERN          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    CONST           reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    ID              reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    LPAREN          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    GOTO            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    DO              reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    AUTO            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    VOLATILE        reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    STATIC          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    REGISTER        reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    STRUCT          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    UNION           reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    INT             reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    CHAR            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    SHORT           reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    LONG            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    FLOAT           reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    DOUBLE          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    UNSIGNED        reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    SIGNED          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    LNOT            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    NOT             reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    SIZEOF          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    INCREMENT       reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    DECREMENT       reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    NUMCONST        reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    MINUS           reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    SEMI            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    RBRACE          reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    CASE            reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    DEFAULT         reduce using rule 98 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope .)
    ELSE            shift and go to state 310

    elseIfList                     shift and go to state 309

state 300

    (103) conditionalScope -> LBRACE . afterLoopLBrace statementList RBRACE afterLoopRBrace
    (33) afterLoopLBrace -> .

    WHILE           reduce using rule 33 (afterLoopLBrace -> .)
    IF              reduce using rule 33 (afterLoopLBrace -> .)
    FOR             reduce using rule 33 (afterLoopLBrace -> .)
    SWITCH          reduce using rule 33 (afterLoopLBrace -> .)
    ENUM            reduce using rule 33 (afterLoopLBrace -> .)
    RETURN          reduce using rule 33 (afterLoopLBrace -> .)
    TYPEDEF         reduce using rule 33 (afterLoopLBrace -> .)
    EXTERN          reduce using rule 33 (afterLoopLBrace -> .)
    CONST           reduce using rule 33 (afterLoopLBrace -> .)
    ID              reduce using rule 33 (afterLoopLBrace -> .)
    LPAREN          reduce using rule 33 (afterLoopLBrace -> .)
    GOTO            reduce using rule 33 (afterLoopLBrace -> .)
    DO              reduce using rule 33 (afterLoopLBrace -> .)
    AUTO            reduce using rule 33 (afterLoopLBrace -> .)
    VOLATILE        reduce using rule 33 (afterLoopLBrace -> .)
    STATIC          reduce using rule 33 (afterLoopLBrace -> .)
    REGISTER        reduce using rule 33 (afterLoopLBrace -> .)
    STRUCT          reduce using rule 33 (afterLoopLBrace -> .)
    UNION           reduce using rule 33 (afterLoopLBrace -> .)
    INT             reduce using rule 33 (afterLoopLBrace -> .)
    CHAR            reduce using rule 33 (afterLoopLBrace -> .)
    SHORT           reduce using rule 33 (afterLoopLBrace -> .)
    LONG            reduce using rule 33 (afterLoopLBrace -> .)
    FLOAT           reduce using rule 33 (afterLoopLBrace -> .)
    DOUBLE          reduce using rule 33 (afterLoopLBrace -> .)
    UNSIGNED        reduce using rule 33 (afterLoopLBrace -> .)
    SIGNED          reduce using rule 33 (afterLoopLBrace -> .)
    LNOT            reduce using rule 33 (afterLoopLBrace -> .)
    NOT             reduce using rule 33 (afterLoopLBrace -> .)
    SIZEOF          reduce using rule 33 (afterLoopLBrace -> .)
    INCREMENT       reduce using rule 33 (afterLoopLBrace -> .)
    DECREMENT       reduce using rule 33 (afterLoopLBrace -> .)
    NUMCONST        reduce using rule 33 (afterLoopLBrace -> .)
    MINUS           reduce using rule 33 (afterLoopLBrace -> .)
    RBRACE          reduce using rule 33 (afterLoopLBrace -> .)
    SEMI            reduce using rule 33 (afterLoopLBrace -> .)

    afterLoopLBrace                shift and go to state 311

state 301

    (105) forLoop -> FOR LPAREN empty SEMI compOps . SEMI empty RPAREN loopScope
    (107) forLoop -> FOR LPAREN empty SEMI compOps . SEMI increase RPAREN loopScope
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    SEMI            shift and go to state 312
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 302

    (106) forLoop -> FOR LPAREN init SEMI compOps . SEMI empty RPAREN loopScope
    (108) forLoop -> FOR LPAREN init SEMI compOps . SEMI increase RPAREN loopScope
    (136) compOps -> compOps . EQ shiftExpr
    (137) compOps -> compOps . NE shiftExpr
    (138) compOps -> compOps . LE shiftExpr
    (139) compOps -> compOps . GE shiftExpr
    (140) compOps -> compOps . LANGLE shiftExpr
    (141) compOps -> compOps . RANGLE shiftExpr

    SEMI            shift and go to state 313
    EQ              shift and go to state 159
    NE              shift and go to state 160
    LE              shift and go to state 161
    GE              shift and go to state 162
    LANGLE          shift and go to state 163
    RANGLE          shift and go to state 164


state 303

    (116) switch -> SWITCH LPAREN expr RPAREN switchscope .

    WHILE           reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    IF              reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    FOR             reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    SWITCH          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    ENUM            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    RETURN          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    TYPEDEF         reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    EXTERN          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    CONST           reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    ID              reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    LPAREN          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    GOTO            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    DO              reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    AUTO            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    VOLATILE        reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    STATIC          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    REGISTER        reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    STRUCT          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    UNION           reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    INT             reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    CHAR            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    SHORT           reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    LONG            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    FLOAT           reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    DOUBLE          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    UNSIGNED        reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    SIGNED          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    LNOT            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    NOT             reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    SIZEOF          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    INCREMENT       reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    DECREMENT       reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    NUMCONST        reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    MINUS           reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    SEMI            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    RBRACE          reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    CASE            reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)
    DEFAULT         reduce using rule 116 (switch -> SWITCH LPAREN expr RPAREN switchscope .)


state 304

    (117) switchscope -> LBRACE . caseList RBRACE
    (118) caseList -> . CASE operand COLON statementList caseList
    (119) caseList -> . CASE CHARACTER COLON statementList caseList
    (120) caseList -> . CASE operand COLON statementList
    (121) caseList -> . CASE CHARACTER COLON statementList
    (122) caseList -> . DEFAULT COLON statementList

    CASE            shift and go to state 315
    DEFAULT         shift and go to state 316

    caseList                       shift and go to state 314

state 305

    (104) doWhile -> DO loopScope WHILE LPAREN conditionals . RPAREN

    RPAREN          shift and go to state 317


state 306

    (32) loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE . afterLoopRBrace
    (34) afterLoopRBrace -> .

    WHILE           reduce using rule 34 (afterLoopRBrace -> .)
    IF              reduce using rule 34 (afterLoopRBrace -> .)
    FOR             reduce using rule 34 (afterLoopRBrace -> .)
    SWITCH          reduce using rule 34 (afterLoopRBrace -> .)
    ENUM            reduce using rule 34 (afterLoopRBrace -> .)
    RETURN          reduce using rule 34 (afterLoopRBrace -> .)
    TYPEDEF         reduce using rule 34 (afterLoopRBrace -> .)
    EXTERN          reduce using rule 34 (afterLoopRBrace -> .)
    CONST           reduce using rule 34 (afterLoopRBrace -> .)
    ID              reduce using rule 34 (afterLoopRBrace -> .)
    LPAREN          reduce using rule 34 (afterLoopRBrace -> .)
    GOTO            reduce using rule 34 (afterLoopRBrace -> .)
    DO              reduce using rule 34 (afterLoopRBrace -> .)
    AUTO            reduce using rule 34 (afterLoopRBrace -> .)
    VOLATILE        reduce using rule 34 (afterLoopRBrace -> .)
    STATIC          reduce using rule 34 (afterLoopRBrace -> .)
    REGISTER        reduce using rule 34 (afterLoopRBrace -> .)
    STRUCT          reduce using rule 34 (afterLoopRBrace -> .)
    UNION           reduce using rule 34 (afterLoopRBrace -> .)
    INT             reduce using rule 34 (afterLoopRBrace -> .)
    CHAR            reduce using rule 34 (afterLoopRBrace -> .)
    SHORT           reduce using rule 34 (afterLoopRBrace -> .)
    LONG            reduce using rule 34 (afterLoopRBrace -> .)
    FLOAT           reduce using rule 34 (afterLoopRBrace -> .)
    DOUBLE          reduce using rule 34 (afterLoopRBrace -> .)
    UNSIGNED        reduce using rule 34 (afterLoopRBrace -> .)
    SIGNED          reduce using rule 34 (afterLoopRBrace -> .)
    LNOT            reduce using rule 34 (afterLoopRBrace -> .)
    NOT             reduce using rule 34 (afterLoopRBrace -> .)
    SIZEOF          reduce using rule 34 (afterLoopRBrace -> .)
    INCREMENT       reduce using rule 34 (afterLoopRBrace -> .)
    DECREMENT       reduce using rule 34 (afterLoopRBrace -> .)
    NUMCONST        reduce using rule 34 (afterLoopRBrace -> .)
    MINUS           reduce using rule 34 (afterLoopRBrace -> .)
    SEMI            reduce using rule 34 (afterLoopRBrace -> .)
    RBRACE          reduce using rule 34 (afterLoopRBrace -> .)
    CASE            reduce using rule 34 (afterLoopRBrace -> .)
    DEFAULT         reduce using rule 34 (afterLoopRBrace -> .)

    afterLoopRBrace                shift and go to state 318

state 307

    (35) loopStatementList -> breakStmt SEMI . loopStatementList
    (35) loopStatementList -> . breakStmt SEMI loopStatementList
    (36) loopStatementList -> . continueStmt SEMI loopStatementList
    (37) loopStatementList -> . statementList
    (126) breakStmt -> . BREAK
    (38) continueStmt -> . CONTINUE
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    BREAK           shift and go to state 295
    CONTINUE        shift and go to state 296
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    breakStmt                      shift and go to state 292
    loopStatementList              shift and go to state 319
    continueStmt                   shift and go to state 293
    statementList                  shift and go to state 294
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 308

    (36) loopStatementList -> continueStmt SEMI . loopStatementList
    (35) loopStatementList -> . breakStmt SEMI loopStatementList
    (36) loopStatementList -> . continueStmt SEMI loopStatementList
    (37) loopStatementList -> . statementList
    (126) breakStmt -> . BREAK
    (38) continueStmt -> . CONTINUE
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    BREAK           shift and go to state 295
    CONTINUE        shift and go to state 296
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    continueStmt                   shift and go to state 293
    loopStatementList              shift and go to state 320
    breakStmt                      shift and go to state 292
    statementList                  shift and go to state 294
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 309

    (99) ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .

    WHILE           reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    IF              reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    FOR             reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SWITCH          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    ENUM            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    RETURN          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    TYPEDEF         reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    EXTERN          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    CONST           reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    ID              reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    LPAREN          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    GOTO            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DO              reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    AUTO            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    VOLATILE        reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    STATIC          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    REGISTER        reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    STRUCT          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    UNION           reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    INT             reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    CHAR            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SHORT           reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    LONG            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    FLOAT           reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DOUBLE          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    UNSIGNED        reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SIGNED          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    LNOT            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    NOT             reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SIZEOF          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    INCREMENT       reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DECREMENT       reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    NUMCONST        reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    MINUS           reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SEMI            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    RBRACE          reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    CASE            reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DEFAULT         reduce using rule 99 (ifStmt -> IF LPAREN conditionals RPAREN conditionalScope elseIfList .)


state 310

    (100) elseIfList -> ELSE . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (101) elseIfList -> ELSE . IF LPAREN conditionals RPAREN conditionalScope
    (102) elseIfList -> ELSE . conditionalScope
    (103) conditionalScope -> . LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace

    IF              shift and go to state 321
    LBRACE          shift and go to state 300

    conditionalScope               shift and go to state 322

state 311

    (103) conditionalScope -> LBRACE afterLoopLBrace . statementList RBRACE afterLoopRBrace
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    statementList                  shift and go to state 323
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 312

    (105) forLoop -> FOR LPAREN empty SEMI compOps SEMI . empty RPAREN loopScope
    (107) forLoop -> FOR LPAREN empty SEMI compOps SEMI . increase RPAREN loopScope
    (1) empty -> .
    (111) increase -> . varAssign
    (112) increase -> . INCREMENT ID
    (113) increase -> . DECREMENT ID
    (114) increase -> . ID INCREMENT
    (115) increase -> . ID DECREMENT
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr

    RPAREN          reduce using rule 1 (empty -> .)
    INCREMENT       shift and go to state 327
    DECREMENT       shift and go to state 329
    ID              shift and go to state 328
    LPAREN          shift and go to state 35

    empty                          shift and go to state 324
    increase                       shift and go to state 325
    varAssign                      shift and go to state 326

state 313

    (106) forLoop -> FOR LPAREN init SEMI compOps SEMI . empty RPAREN loopScope
    (108) forLoop -> FOR LPAREN init SEMI compOps SEMI . increase RPAREN loopScope
    (1) empty -> .
    (111) increase -> . varAssign
    (112) increase -> . INCREMENT ID
    (113) increase -> . DECREMENT ID
    (114) increase -> . ID INCREMENT
    (115) increase -> . ID DECREMENT
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr

    RPAREN          reduce using rule 1 (empty -> .)
    INCREMENT       shift and go to state 327
    DECREMENT       shift and go to state 329
    ID              shift and go to state 328
    LPAREN          shift and go to state 35

    empty                          shift and go to state 330
    increase                       shift and go to state 331
    varAssign                      shift and go to state 326

state 314

    (117) switchscope -> LBRACE caseList . RBRACE

    RBRACE          shift and go to state 332


state 315

    (118) caseList -> CASE . operand COLON statementList caseList
    (119) caseList -> CASE . CHARACTER COLON statementList caseList
    (120) caseList -> CASE . operand COLON statementList
    (121) caseList -> CASE . CHARACTER COLON statementList
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    CHARACTER       shift and go to state 334
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    LPAREN          shift and go to state 98
    MINUS           shift and go to state 107

    operand                        shift and go to state 333
    funcCall                       shift and go to state 106

state 316

    (122) caseList -> DEFAULT . COLON statementList

    COLON           shift and go to state 335


state 317

    (104) doWhile -> DO loopScope WHILE LPAREN conditionals RPAREN .

    SEMI            reduce using rule 104 (doWhile -> DO loopScope WHILE LPAREN conditionals RPAREN .)


state 318

    (32) loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .

    WHILE           reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    IF              reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    FOR             reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    SWITCH          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    ENUM            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    RETURN          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    TYPEDEF         reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    EXTERN          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    CONST           reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    ID              reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    LPAREN          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    GOTO            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    DO              reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    AUTO            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    VOLATILE        reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    STATIC          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    REGISTER        reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    STRUCT          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    UNION           reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    INT             reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    CHAR            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    SHORT           reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    LONG            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    FLOAT           reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    DOUBLE          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    UNSIGNED        reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    SIGNED          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    LNOT            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    NOT             reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    SIZEOF          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    INCREMENT       reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    DECREMENT       reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    NUMCONST        reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    MINUS           reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    SEMI            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    RBRACE          reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    CASE            reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)
    DEFAULT         reduce using rule 32 (loopScope -> LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace .)


state 319

    (35) loopStatementList -> breakStmt SEMI loopStatementList .

    RBRACE          reduce using rule 35 (loopStatementList -> breakStmt SEMI loopStatementList .)


state 320

    (36) loopStatementList -> continueStmt SEMI loopStatementList .

    RBRACE          reduce using rule 36 (loopStatementList -> continueStmt SEMI loopStatementList .)


state 321

    (100) elseIfList -> ELSE IF . LPAREN conditionals RPAREN conditionalScope elseIfList
    (101) elseIfList -> ELSE IF . LPAREN conditionals RPAREN conditionalScope

    LPAREN          shift and go to state 336


state 322

    (102) elseIfList -> ELSE conditionalScope .

    WHILE           reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    IF              reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    FOR             reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    SWITCH          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    ENUM            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    RETURN          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    TYPEDEF         reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    EXTERN          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    CONST           reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    ID              reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    LPAREN          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    GOTO            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    DO              reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    AUTO            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    VOLATILE        reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    STATIC          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    REGISTER        reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    STRUCT          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    UNION           reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    INT             reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    CHAR            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    SHORT           reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    LONG            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    FLOAT           reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    DOUBLE          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    UNSIGNED        reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    SIGNED          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    LNOT            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    NOT             reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    SIZEOF          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    INCREMENT       reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    DECREMENT       reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    NUMCONST        reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    MINUS           reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    SEMI            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    RBRACE          reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    CASE            reduce using rule 102 (elseIfList -> ELSE conditionalScope .)
    DEFAULT         reduce using rule 102 (elseIfList -> ELSE conditionalScope .)


state 323

    (103) conditionalScope -> LBRACE afterLoopLBrace statementList . RBRACE afterLoopRBrace

    RBRACE          shift and go to state 337


state 324

    (105) forLoop -> FOR LPAREN empty SEMI compOps SEMI empty . RPAREN loopScope

    RPAREN          shift and go to state 338


state 325

    (107) forLoop -> FOR LPAREN empty SEMI compOps SEMI increase . RPAREN loopScope

    RPAREN          shift and go to state 339


state 326

    (111) increase -> varAssign .

    RPAREN          reduce using rule 111 (increase -> varAssign .)


state 327

    (112) increase -> INCREMENT . ID

    ID              shift and go to state 340


state 328

    (114) increase -> ID . INCREMENT
    (115) increase -> ID . DECREMENT
    (166) varAssign -> ID . EQUALS expr
    (167) varAssign -> ID . EQUALS STRING
    (169) varAssign -> ID . TIMESEQUAL expr
    (170) varAssign -> ID . DIVEQUAL expr
    (171) varAssign -> ID . MODEQUAL expr
    (172) varAssign -> ID . PLUSEQUAL expr
    (173) varAssign -> ID . MINUSEQUAL expr
    (174) varAssign -> ID . LSHIFTEQUAL expr
    (175) varAssign -> ID . RSHIFTEQUAL expr
    (176) varAssign -> ID . ANDEQUAL expr
    (177) varAssign -> ID . OREQUAL expr
    (178) varAssign -> ID . XOREQUAL expr

    INCREMENT       shift and go to state 341
    DECREMENT       shift and go to state 342
    EQUALS          shift and go to state 67
    TIMESEQUAL      shift and go to state 68
    DIVEQUAL        shift and go to state 69
    MODEQUAL        shift and go to state 70
    PLUSEQUAL       shift and go to state 71
    MINUSEQUAL      shift and go to state 72
    LSHIFTEQUAL     shift and go to state 73
    RSHIFTEQUAL     shift and go to state 74
    ANDEQUAL        shift and go to state 75
    OREQUAL         shift and go to state 76
    XOREQUAL        shift and go to state 77


state 329

    (113) increase -> DECREMENT . ID

    ID              shift and go to state 343


state 330

    (106) forLoop -> FOR LPAREN init SEMI compOps SEMI empty . RPAREN loopScope

    RPAREN          shift and go to state 344


state 331

    (108) forLoop -> FOR LPAREN init SEMI compOps SEMI increase . RPAREN loopScope

    RPAREN          shift and go to state 345


state 332

    (117) switchscope -> LBRACE caseList RBRACE .

    WHILE           reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    IF              reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    FOR             reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    SWITCH          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    ENUM            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    RETURN          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    TYPEDEF         reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    EXTERN          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    CONST           reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    ID              reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    LPAREN          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    GOTO            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    DO              reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    AUTO            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    VOLATILE        reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    STATIC          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    REGISTER        reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    STRUCT          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    UNION           reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    INT             reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    CHAR            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    SHORT           reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    LONG            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    FLOAT           reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    DOUBLE          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    UNSIGNED        reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    SIGNED          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    LNOT            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    NOT             reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    SIZEOF          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    INCREMENT       reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    DECREMENT       reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    NUMCONST        reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    MINUS           reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    SEMI            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    RBRACE          reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    CASE            reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)
    DEFAULT         reduce using rule 117 (switchscope -> LBRACE caseList RBRACE .)


state 333

    (118) caseList -> CASE operand . COLON statementList caseList
    (120) caseList -> CASE operand . COLON statementList

    COLON           shift and go to state 346


state 334

    (119) caseList -> CASE CHARACTER . COLON statementList caseList
    (121) caseList -> CASE CHARACTER . COLON statementList

    COLON           shift and go to state 347


state 335

    (122) caseList -> DEFAULT COLON . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    statementList                  shift and go to state 348
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 336

    (100) elseIfList -> ELSE IF LPAREN . conditionals RPAREN conditionalScope elseIfList
    (101) elseIfList -> ELSE IF LPAREN . conditionals RPAREN conditionalScope
    (179) conditionals -> . expr
    (180) conditionals -> . TRUE
    (181) conditionals -> . FALSE
    (182) conditionals -> . LPAREN conditionals RPAREN
    (128) expr -> . logicalExpr
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    TRUE            shift and go to state 270
    FALSE           shift and go to state 271
    LPAREN          shift and go to state 267
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    ID              shift and go to state 97
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    conditionals                   shift and go to state 349
    expr                           shift and go to state 269
    logicalExpr                    shift and go to state 110
    compOps                        shift and go to state 111
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 337

    (103) conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE . afterLoopRBrace
    (34) afterLoopRBrace -> .

    ELSE            reduce using rule 34 (afterLoopRBrace -> .)
    WHILE           reduce using rule 34 (afterLoopRBrace -> .)
    IF              reduce using rule 34 (afterLoopRBrace -> .)
    FOR             reduce using rule 34 (afterLoopRBrace -> .)
    SWITCH          reduce using rule 34 (afterLoopRBrace -> .)
    ENUM            reduce using rule 34 (afterLoopRBrace -> .)
    RETURN          reduce using rule 34 (afterLoopRBrace -> .)
    TYPEDEF         reduce using rule 34 (afterLoopRBrace -> .)
    EXTERN          reduce using rule 34 (afterLoopRBrace -> .)
    CONST           reduce using rule 34 (afterLoopRBrace -> .)
    ID              reduce using rule 34 (afterLoopRBrace -> .)
    LPAREN          reduce using rule 34 (afterLoopRBrace -> .)
    GOTO            reduce using rule 34 (afterLoopRBrace -> .)
    DO              reduce using rule 34 (afterLoopRBrace -> .)
    AUTO            reduce using rule 34 (afterLoopRBrace -> .)
    VOLATILE        reduce using rule 34 (afterLoopRBrace -> .)
    STATIC          reduce using rule 34 (afterLoopRBrace -> .)
    REGISTER        reduce using rule 34 (afterLoopRBrace -> .)
    STRUCT          reduce using rule 34 (afterLoopRBrace -> .)
    UNION           reduce using rule 34 (afterLoopRBrace -> .)
    INT             reduce using rule 34 (afterLoopRBrace -> .)
    CHAR            reduce using rule 34 (afterLoopRBrace -> .)
    SHORT           reduce using rule 34 (afterLoopRBrace -> .)
    LONG            reduce using rule 34 (afterLoopRBrace -> .)
    FLOAT           reduce using rule 34 (afterLoopRBrace -> .)
    DOUBLE          reduce using rule 34 (afterLoopRBrace -> .)
    UNSIGNED        reduce using rule 34 (afterLoopRBrace -> .)
    SIGNED          reduce using rule 34 (afterLoopRBrace -> .)
    LNOT            reduce using rule 34 (afterLoopRBrace -> .)
    NOT             reduce using rule 34 (afterLoopRBrace -> .)
    SIZEOF          reduce using rule 34 (afterLoopRBrace -> .)
    INCREMENT       reduce using rule 34 (afterLoopRBrace -> .)
    DECREMENT       reduce using rule 34 (afterLoopRBrace -> .)
    NUMCONST        reduce using rule 34 (afterLoopRBrace -> .)
    MINUS           reduce using rule 34 (afterLoopRBrace -> .)
    SEMI            reduce using rule 34 (afterLoopRBrace -> .)
    RBRACE          reduce using rule 34 (afterLoopRBrace -> .)
    CASE            reduce using rule 34 (afterLoopRBrace -> .)
    DEFAULT         reduce using rule 34 (afterLoopRBrace -> .)

    afterLoopRBrace                shift and go to state 350

state 338

    (105) forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN . loopScope
    (32) loopScope -> . LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 264

    loopScope                      shift and go to state 351

state 339

    (107) forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN . loopScope
    (32) loopScope -> . LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 264

    loopScope                      shift and go to state 352

state 340

    (112) increase -> INCREMENT ID .

    RPAREN          reduce using rule 112 (increase -> INCREMENT ID .)


state 341

    (114) increase -> ID INCREMENT .

    RPAREN          reduce using rule 114 (increase -> ID INCREMENT .)


state 342

    (115) increase -> ID DECREMENT .

    RPAREN          reduce using rule 115 (increase -> ID DECREMENT .)


state 343

    (113) increase -> DECREMENT ID .

    RPAREN          reduce using rule 113 (increase -> DECREMENT ID .)


state 344

    (106) forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN . loopScope
    (32) loopScope -> . LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 264

    loopScope                      shift and go to state 353

state 345

    (108) forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN . loopScope
    (32) loopScope -> . LBRACE afterLoopLBrace loopStatementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 264

    loopScope                      shift and go to state 354

state 346

    (118) caseList -> CASE operand COLON . statementList caseList
    (120) caseList -> CASE operand COLON . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    operand                        shift and go to state 124
    statementList                  shift and go to state 355
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    funcCall                       shift and go to state 106

state 347

    (119) caseList -> CASE CHARACTER COLON . statementList caseList
    (121) caseList -> CASE CHARACTER COLON . statementList
    (83) statementList -> . empty
    (84) statementList -> . statement SEMI statementList
    (85) statementList -> . whileLoop statementList
    (86) statementList -> . ifStmt statementList
    (87) statementList -> . forLoop statementList
    (88) statementList -> . switch statementList
    (89) statementList -> . enumInScope statementList
    (1) empty -> .
    (90) statement -> . returnStmt
    (91) statement -> . varDecl
    (92) statement -> . varAssign
    (93) statement -> . gotoStmt
    (94) statement -> . expr
    (95) statement -> . empty
    (96) statement -> . doWhile
    (97) whileLoop -> . WHILE LPAREN conditionals RPAREN loopScope
    (98) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope
    (99) ifStmt -> . IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (105) forLoop -> . FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope
    (106) forLoop -> . FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope
    (107) forLoop -> . FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope
    (108) forLoop -> . FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope
    (116) switch -> . SWITCH LPAREN expr RPAREN switchscope
    (8) enumInScope -> . ENUM ID ID SEMI
    (123) returnStmt -> . RETURN expr
    (124) returnStmt -> . RETURN varAssign
    (41) varDecl -> . combineTypeSpec
    (42) varDecl -> . typeSpec ID
    (43) varDecl -> . typeSpec varAssign afterVarAssign
    (44) varDecl -> . combineTypeSpec ID
    (45) varDecl -> . TYPEDEF typeSpec ID
    (46) varDecl -> . TYPEDEF combineTypeSpec ID
    (47) varDecl -> . EXTERN typeSpecPostfix ID
    (48) varDecl -> . CONST EXTERN typeSpecPostfix ID
    (166) varAssign -> . ID EQUALS expr
    (167) varAssign -> . ID EQUALS STRING
    (168) varAssign -> . LPAREN varAssign RPAREN
    (169) varAssign -> . ID TIMESEQUAL expr
    (170) varAssign -> . ID DIVEQUAL expr
    (171) varAssign -> . ID MODEQUAL expr
    (172) varAssign -> . ID PLUSEQUAL expr
    (173) varAssign -> . ID MINUSEQUAL expr
    (174) varAssign -> . ID LSHIFTEQUAL expr
    (175) varAssign -> . ID RSHIFTEQUAL expr
    (176) varAssign -> . ID ANDEQUAL expr
    (177) varAssign -> . ID OREQUAL expr
    (178) varAssign -> . ID XOREQUAL expr
    (125) gotoStmt -> . GOTO ID
    (128) expr -> . logicalExpr
    (104) doWhile -> . DO loopScope WHILE LPAREN conditionals RPAREN
    (61) combineTypeSpec -> . combineType LBRACE varDeclList RBRACE
    (52) typeSpec -> . AUTO typeSpecPostfix
    (53) typeSpec -> . VOLATILE typeSpecPostfix
    (54) typeSpec -> . VOLATILE STATIC typeSpecPostfix
    (55) typeSpec -> . STATIC typeSpecPostfix
    (56) typeSpec -> . CONST typeSpecPostfix
    (57) typeSpec -> . REGISTER typeSpecPostfix
    (58) typeSpec -> . REGISTER STATIC typeSpecPostfix
    (59) typeSpec -> . typeSpecPostfix
    (60) typeSpec -> . combineType
    (129) logicalExpr -> . compOps
    (130) logicalExpr -> . logicalExpr LOR compOps
    (131) logicalExpr -> . logicalExpr LAND compOps
    (132) logicalExpr -> . logicalExpr OR compOps
    (133) logicalExpr -> . logicalExpr XOR compOps
    (134) logicalExpr -> . logicalExpr AND compOps
    (62) combineType -> . STRUCT ID
    (63) combineType -> . UNION ID
    (64) typeSpecPostfix -> . INT
    (65) typeSpecPostfix -> . CHAR
    (66) typeSpecPostfix -> . SHORT
    (67) typeSpecPostfix -> . LONG
    (68) typeSpecPostfix -> . FLOAT
    (69) typeSpecPostfix -> . DOUBLE
    (70) typeSpecPostfix -> . UNSIGNED INT
    (71) typeSpecPostfix -> . SIGNED INT
    (72) typeSpecPostfix -> . SHORT INT
    (73) typeSpecPostfix -> . LONG INT
    (74) typeSpecPostfix -> . LONG LONG INT
    (75) typeSpecPostfix -> . UNSIGNED CHAR
    (76) typeSpecPostfix -> . SIGNED CHAR
    (77) typeSpecPostfix -> . LONG LONG
    (78) typeSpecPostfix -> . SIGNED LONG
    (79) typeSpecPostfix -> . UNSIGNED LONG
    (80) typeSpecPostfix -> . LONG DOUBLE
    (81) typeSpecPostfix -> . SIGNED SHORT
    (82) typeSpecPostfix -> . UNSIGNED SHORT
    (135) compOps -> . shiftExpr
    (136) compOps -> . compOps EQ shiftExpr
    (137) compOps -> . compOps NE shiftExpr
    (138) compOps -> . compOps LE shiftExpr
    (139) compOps -> . compOps GE shiftExpr
    (140) compOps -> . compOps LANGLE shiftExpr
    (141) compOps -> . compOps RANGLE shiftExpr
    (142) shiftExpr -> . additiveExpr
    (143) shiftExpr -> . shiftExpr LSHIFT additiveExpr
    (144) shiftExpr -> . shiftExpr RSHIFT additiveExpr
    (145) additiveExpr -> . additiveExpr PLUS multiplicativeExpr
    (146) additiveExpr -> . additiveExpr MINUS multiplicativeExpr
    (147) additiveExpr -> . multiplicativeExpr
    (148) multiplicativeExpr -> . multiplicativeExpr TIMES castExpr
    (149) multiplicativeExpr -> . multiplicativeExpr DIVIDE castExpr
    (150) multiplicativeExpr -> . multiplicativeExpr MODULO castExpr
    (151) multiplicativeExpr -> . castExpr
    (152) castExpr -> . unaryExpr
    (153) castExpr -> . LPAREN typeSpec RPAREN castExpr
    (154) unaryExpr -> . postfixExpr
    (155) unaryExpr -> . LNOT unaryExpr
    (156) unaryExpr -> . NOT unaryExpr
    (157) unaryExpr -> . SIZEOF LPAREN unaryExpr RPAREN
    (158) unaryExpr -> . SIZEOF LPAREN typeSpec RPAREN
    (159) unaryExpr -> . unaryExpr INCREMENT
    (160) unaryExpr -> . unaryExpr DECREMENT
    (161) postfixExpr -> . operand
    (162) postfixExpr -> . postfixExpr PERIOD ID
    (163) postfixExpr -> . postfixExpr LBRACKET expr RBRACKET
    (164) postfixExpr -> . INCREMENT postfixExpr
    (165) postfixExpr -> . DECREMENT postfixExpr
    (23) operand -> . ID afterID
    (24) operand -> . NUMCONST
    (25) operand -> . funcCall
    (26) operand -> . LPAREN expr RPAREN
    (27) operand -> . MINUS NUMCONST
    (127) funcCall -> . ID LPAREN args RPAREN

    CASE            reduce using rule 1 (empty -> .)
    DEFAULT         reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    WHILE           shift and go to state 238
    IF              shift and go to state 240
    FOR             shift and go to state 241
    SWITCH          shift and go to state 242
    ENUM            shift and go to state 243
    RETURN          shift and go to state 245
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    CONST           shift and go to state 12
    ID              shift and go to state 244
    LPAREN          shift and go to state 239
    GOTO            shift and go to state 246
    DO              shift and go to state 247
    AUTO            shift and go to state 16
    VOLATILE        shift and go to state 17
    STATIC          shift and go to state 18
    REGISTER        shift and go to state 19
    STRUCT          shift and go to state 20
    UNION           shift and go to state 21
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    SHORT           shift and go to state 24
    LONG            shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    UNSIGNED        shift and go to state 28
    SIGNED          shift and go to state 29
    LNOT            shift and go to state 119
    NOT             shift and go to state 120
    SIZEOF          shift and go to state 121
    INCREMENT       shift and go to state 122
    DECREMENT       shift and go to state 123
    NUMCONST        shift and go to state 105
    MINUS           shift and go to state 107

    statementList                  shift and go to state 356
    empty                          shift and go to state 225
    statement                      shift and go to state 226
    whileLoop                      shift and go to state 227
    ifStmt                         shift and go to state 228
    forLoop                        shift and go to state 229
    switch                         shift and go to state 230
    enumInScope                    shift and go to state 231
    returnStmt                     shift and go to state 232
    varDecl                        shift and go to state 233
    varAssign                      shift and go to state 234
    gotoStmt                       shift and go to state 235
    expr                           shift and go to state 236
    doWhile                        shift and go to state 237
    compOps                        shift and go to state 111
    combineTypeSpec                shift and go to state 7
    typeSpec                       shift and go to state 92
    typeSpecPostfix                shift and go to state 11
    logicalExpr                    shift and go to state 110
    combineType                    shift and go to state 15
    shiftExpr                      shift and go to state 112
    additiveExpr                   shift and go to state 113
    multiplicativeExpr             shift and go to state 114
    castExpr                       shift and go to state 115
    unaryExpr                      shift and go to state 116
    postfixExpr                    shift and go to state 118
    operand                        shift and go to state 124
    funcCall                       shift and go to state 106

state 348

    (122) caseList -> DEFAULT COLON statementList .

    RBRACE          reduce using rule 122 (caseList -> DEFAULT COLON statementList .)


state 349

    (100) elseIfList -> ELSE IF LPAREN conditionals . RPAREN conditionalScope elseIfList
    (101) elseIfList -> ELSE IF LPAREN conditionals . RPAREN conditionalScope

    RPAREN          shift and go to state 357


state 350

    (103) conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .

    ELSE            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    WHILE           reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    IF              reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    FOR             reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    SWITCH          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    ENUM            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    RETURN          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    TYPEDEF         reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    EXTERN          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    CONST           reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    ID              reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    LPAREN          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    GOTO            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    DO              reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    AUTO            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    VOLATILE        reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    STATIC          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    REGISTER        reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    STRUCT          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    UNION           reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    INT             reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    CHAR            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    SHORT           reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    LONG            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    FLOAT           reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    DOUBLE          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    UNSIGNED        reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    SIGNED          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    LNOT            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    NOT             reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    SIZEOF          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    INCREMENT       reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    DECREMENT       reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    NUMCONST        reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    MINUS           reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    SEMI            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    RBRACE          reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    CASE            reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)
    DEFAULT         reduce using rule 103 (conditionalScope -> LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace .)


state 351

    (105) forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .

    WHILE           reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    IF              reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    FOR             reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    SWITCH          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    ENUM            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    RETURN          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    TYPEDEF         reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    EXTERN          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    CONST           reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    ID              reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    LPAREN          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    GOTO            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    DO              reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    AUTO            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    VOLATILE        reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    STATIC          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    REGISTER        reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    STRUCT          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    UNION           reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    INT             reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    CHAR            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    SHORT           reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    LONG            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    FLOAT           reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    DOUBLE          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    UNSIGNED        reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    SIGNED          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    LNOT            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    NOT             reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    SIZEOF          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    INCREMENT       reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    DECREMENT       reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    NUMCONST        reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    MINUS           reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    SEMI            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    RBRACE          reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    CASE            reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)
    DEFAULT         reduce using rule 105 (forLoop -> FOR LPAREN empty SEMI compOps SEMI empty RPAREN loopScope .)


state 352

    (107) forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .

    WHILE           reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    IF              reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    FOR             reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    SWITCH          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    ENUM            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    RETURN          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    TYPEDEF         reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    EXTERN          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    CONST           reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    ID              reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    LPAREN          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    GOTO            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    DO              reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    AUTO            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    VOLATILE        reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    STATIC          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    REGISTER        reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    STRUCT          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    UNION           reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    INT             reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    CHAR            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    SHORT           reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    LONG            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    FLOAT           reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    DOUBLE          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    UNSIGNED        reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    SIGNED          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    LNOT            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    NOT             reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    SIZEOF          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    INCREMENT       reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    DECREMENT       reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    NUMCONST        reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    MINUS           reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    SEMI            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    RBRACE          reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    CASE            reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)
    DEFAULT         reduce using rule 107 (forLoop -> FOR LPAREN empty SEMI compOps SEMI increase RPAREN loopScope .)


state 353

    (106) forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .

    WHILE           reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    IF              reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    FOR             reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    SWITCH          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    ENUM            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    RETURN          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    TYPEDEF         reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    EXTERN          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    CONST           reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    ID              reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    LPAREN          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    GOTO            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    DO              reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    AUTO            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    VOLATILE        reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    STATIC          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    REGISTER        reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    STRUCT          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    UNION           reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    INT             reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    CHAR            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    SHORT           reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    LONG            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    FLOAT           reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    DOUBLE          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    UNSIGNED        reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    SIGNED          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    LNOT            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    NOT             reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    SIZEOF          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    INCREMENT       reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    DECREMENT       reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    NUMCONST        reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    MINUS           reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    SEMI            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    RBRACE          reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    CASE            reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)
    DEFAULT         reduce using rule 106 (forLoop -> FOR LPAREN init SEMI compOps SEMI empty RPAREN loopScope .)


state 354

    (108) forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .

    WHILE           reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    IF              reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    FOR             reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    SWITCH          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    ENUM            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    RETURN          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    TYPEDEF         reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    EXTERN          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    CONST           reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    ID              reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    LPAREN          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    GOTO            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    DO              reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    AUTO            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    VOLATILE        reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    STATIC          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    REGISTER        reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    STRUCT          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    UNION           reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    INT             reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    CHAR            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    SHORT           reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    LONG            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    FLOAT           reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    DOUBLE          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    UNSIGNED        reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    SIGNED          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    LNOT            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    NOT             reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    SIZEOF          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    INCREMENT       reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    DECREMENT       reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    NUMCONST        reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    MINUS           reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    SEMI            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    RBRACE          reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    CASE            reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)
    DEFAULT         reduce using rule 108 (forLoop -> FOR LPAREN init SEMI compOps SEMI increase RPAREN loopScope .)


state 355

    (118) caseList -> CASE operand COLON statementList . caseList
    (120) caseList -> CASE operand COLON statementList .
    (118) caseList -> . CASE operand COLON statementList caseList
    (119) caseList -> . CASE CHARACTER COLON statementList caseList
    (120) caseList -> . CASE operand COLON statementList
    (121) caseList -> . CASE CHARACTER COLON statementList
    (122) caseList -> . DEFAULT COLON statementList

    RBRACE          reduce using rule 120 (caseList -> CASE operand COLON statementList .)
    CASE            shift and go to state 315
    DEFAULT         shift and go to state 316

    caseList                       shift and go to state 358

state 356

    (119) caseList -> CASE CHARACTER COLON statementList . caseList
    (121) caseList -> CASE CHARACTER COLON statementList .
    (118) caseList -> . CASE operand COLON statementList caseList
    (119) caseList -> . CASE CHARACTER COLON statementList caseList
    (120) caseList -> . CASE operand COLON statementList
    (121) caseList -> . CASE CHARACTER COLON statementList
    (122) caseList -> . DEFAULT COLON statementList

    RBRACE          reduce using rule 121 (caseList -> CASE CHARACTER COLON statementList .)
    CASE            shift and go to state 315
    DEFAULT         shift and go to state 316

    caseList                       shift and go to state 359

state 357

    (100) elseIfList -> ELSE IF LPAREN conditionals RPAREN . conditionalScope elseIfList
    (101) elseIfList -> ELSE IF LPAREN conditionals RPAREN . conditionalScope
    (103) conditionalScope -> . LBRACE afterLoopLBrace statementList RBRACE afterLoopRBrace

    LBRACE          shift and go to state 300

    conditionalScope               shift and go to state 360

state 358

    (118) caseList -> CASE operand COLON statementList caseList .

    RBRACE          reduce using rule 118 (caseList -> CASE operand COLON statementList caseList .)


state 359

    (119) caseList -> CASE CHARACTER COLON statementList caseList .

    RBRACE          reduce using rule 119 (caseList -> CASE CHARACTER COLON statementList caseList .)


state 360

    (100) elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope . elseIfList
    (101) elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .
    (100) elseIfList -> . ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList
    (101) elseIfList -> . ELSE IF LPAREN conditionals RPAREN conditionalScope
    (102) elseIfList -> . ELSE conditionalScope

    WHILE           reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    IF              reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    FOR             reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    SWITCH          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    ENUM            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    RETURN          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    TYPEDEF         reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    EXTERN          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    CONST           reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    ID              reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    LPAREN          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    GOTO            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    DO              reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    AUTO            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    VOLATILE        reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    STATIC          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    REGISTER        reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    STRUCT          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    UNION           reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    INT             reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    CHAR            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    SHORT           reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    LONG            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    FLOAT           reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    DOUBLE          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    UNSIGNED        reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    SIGNED          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    LNOT            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    NOT             reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    SIZEOF          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    INCREMENT       reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    DECREMENT       reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    NUMCONST        reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    MINUS           reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    SEMI            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    RBRACE          reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    CASE            reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    DEFAULT         reduce using rule 101 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope .)
    ELSE            shift and go to state 310

    elseIfList                     shift and go to state 361

state 361

    (100) elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .

    WHILE           reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    IF              reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    FOR             reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SWITCH          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    ENUM            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    RETURN          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    TYPEDEF         reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    EXTERN          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    CONST           reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    ID              reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    LPAREN          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    GOTO            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DO              reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    AUTO            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    VOLATILE        reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    STATIC          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    REGISTER        reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    STRUCT          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    UNION           reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    INT             reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    CHAR            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SHORT           reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    LONG            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    FLOAT           reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DOUBLE          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    UNSIGNED        reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SIGNED          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    LNOT            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    NOT             reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SIZEOF          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    INCREMENT       reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DECREMENT       reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    NUMCONST        reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    MINUS           reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    SEMI            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    RBRACE          reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    CASE            reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)
    DEFAULT         reduce using rule 100 (elseIfList -> ELSE IF LPAREN conditionals RPAREN conditionalScope elseIfList .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INCREMENT in state 177 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 177 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 178 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 178 resolved as shift
WARNING: shift/reduce conflict for PERIOD in state 180 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 180 resolved as shift
WARNING: shift/reduce conflict for PERIOD in state 181 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 181 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 282 resolved as shift
